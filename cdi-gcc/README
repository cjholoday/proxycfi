+===========================================================================
| Compiling a CDI version of GCC        Colton Holoday (choloday@umich.edu)
+===========================================================================

This guide is only tested on Ubuntu version 16.04 with GCC version 6.1.0. Make sure you have the correct version of gcc! You can find it here: https://gcc.gnu.org/releases.html. Read the command line snippets before pasting them! They will often need to be modified.

Pull the repository from https://bitbucket.org/michigancdi/cdi to get the assembly converter, verifier, and gcc wrappers (the wrappers around the assembler and linker). It is strongly recommended that you build cdi-gcc in the "cdi-gcc" repository directory! Doing so will make this guide far easier to follow.

+===========================================================================
| (Optional) Compile gcc normally. 
+===========================================================================

By compiling with the normal gcc first, you’ll know if issues you experience are caused by adding CDI or simply from the hairy mess that is GCC. Run the following commands to download some prerequisites. I still recommend going through the dependency list in the GCC documentation.

    [directory: cdi/cdi-gcc/gcc-6.1.0]
    ./contrib/download_prerequisites

Don’t run configure and make in the gcc-6.1.0 folder. Make sure to run them from a separate directory. 

    [directory: cdi/cdi-gcc/]
    mkdir -p dest && mkdir -p build && cd $_ 
    ../gcc-6.1.0/configure  --prefix="$(pwd)/../dest/" --disable-bootstrap
    make 2> errlog.txt | tee makelog.txt
    make install


In the above commands, gcc would be installed into the cdi/cdi-gcc/dest folder. Compilation files are stored in the cdi/cdi-gcc/build directory. If you want to start at the configuration stage again, run make distclean. You may need to add --disable-multilib to the configuration. After about 10 minutes of compilation, you can safely assume GCC will compile successfully.


+===========================================================================
| Compile gcc while specifying a custom linker and assembler
+===========================================================================

In order to integrate gcc into a cdi build system we need to intercept the the linker and assembler calls. To do this we will (for now) create symlinks to the real assembler and linker. Later we’ll replace these symlinks with our cdi-assembler and cdi-linker. 

    cd /usr/local/
    sudo mkdir -p cdi && cd $_
    sudo rm -f cdi-as cdi-ld
    sudo ln -s $(which as) cdi-as
    sudo ln -s $(which ld) cdi-ld 

Now we compile GCC as before except with a custom assembler and linker. This should take 2-3 hours. Note the “mv” commands ensure that the c-parser.c and c-typeck.c are the original gcc versions. The “mv” commands will fail if this isn’t a recompile attempt, which is fine.

IMPORTANT REMINDER: this guide assumes you're building inside cdi/cdi-gcc and that you've placed gcc-6.1.0 in cdi/cdi-gcc
NOTE: If you're attemping to compile again, then make sure you run 'make distclean' and the commands above!

    [directory: cdi/cdi-gcc]
    mkdir -p dest && mkdir -p build && cd $_
    mv ../gcc-6.1.0/gcc/c/norm-c-parser.c ../gcc-6.1.0/gcc/c/c-parser.c
    mv ../gcc-6.1.0/gcc/c/norm-c-typeck.c ../gcc-6.1.0/gcc/c/c-typeck.c
    ../gcc-6.1.0/configure --prefix="$(pwd)/../dest/" --with-as=/usr/local/cdi/cdi-as --with-ld=/usr/local/cdi/cdi-ld --disable-lto --enable-languages=c --disable-bootstrap 2> config_errlog.txt | tee configlog.txt 
    make 2> errlog.txt | tee makelog.txt

Use the following configure instead if you want to have gcc do extra checking:

    ../gcc-6.1.0/configure --prefix="$(pwd)/../dest/" \
            --with-as=/usr/local/cdi/cdi-as --with-ld=/usr/local/cdi/cdi-ld \
            --disable-lto --enable-languages=c --disable-bootstrap  \
            --enable-checking=all 2> config_errlog.txt | tee configlog.txt

+===========================================================================
| Recompile with modifications to GCC
+===========================================================================

Now we add the modifications to GCC. All of these files go into the cdi/cdi-gcc/gcc-6.1.0/gcc/c/ directory— via symlink of course. 

    [directory: cdi/cdi-gcc/build]
    mv ../gcc-6.1.0/gcc/c/c-typeck.c ../gcc-6.1.0/gcc/c/norm-c-typeck.c
    mv ../gcc-6.1.0/gcc/c/c-parser.c ../gcc-6.1.0/gcc/c/norm-c-parser.c
    ln -s "$(pwd)/../../type_drop/cdi-c-typeck.c" ../gcc-6.1.0/gcc/c/c-typeck.c
    ln -s "$(pwd)/../../type_drop/cdi-c-parser.c" ../gcc-6.1.0/gcc/c/c-parser.c
    touch ../gcc-6.1.0/gcc/c/c-typeck.c
    touch ../gcc-6.1.0/gcc/c/c-parser.c
    ln -sf "$(pwd)/../../type_drop/type_drop.c" ../gcc-6.1.0/gcc/c/cdi.c
    ln -sf "$(pwd)/../../type_drop/type_drop.h" ../gcc-6.1.0/gcc/c/cdi.h

DO NOT RUN make distclean unless you want to start at part 2 again. Compile again with the changes to gcc:
    
    [directory: cdi/cdi-gcc/build]
    make 2> errlog2.txt | tee makelog2.txt
    make install

+===========================================================================
| Set up /usr/local/cdi and add cdi-gcc to /usr/local/bin
+===========================================================================
    
As promised, we now replace the assembler and linker symlinks with the custom CDI versions. We also add cdi-gcc to /usr/local/bin

    [directory: cdi/cdi-gcc/build]
    sudo ln -sf "$(pwd)/../../gcc_wrappers/cdi-as.py" /usr/local/cdi/cdi-as
    sudo ln -sf "$(pwd)/../../gcc_wrappers/cdi-ld.py" /usr/local/cdi/cdi-ld
    sudo ln -sf "$(pwd)/../../converter/gen_cdi.py" /usr/local/cdi/gen_cdi
    sudo ln -sf "$(pwd)/../dest/bin/gcc" /usr/local/bin/cdi-gcc
    sudo ln -sf "$(pwd)/../../converter/cdi_abort.cdi.s" /usr/local/cdi/cdi_abort.cdi.s
    cd /usr/local/cdi/ && sudo gcc -c cdi_abort.cdi.s

+===========================================================================
| Test that cdi-gcc works
+===========================================================================

You should now be able to use cdi-gcc to compile as you would with gcc. I suggest testing it on the improved benchmark in the cdi-generator repository.

    [directory: cdi/converter/improved_benchmark]
    cdi-gcc -g --save-temps -fno-jump-tables printf.c benchmark.c && ./a.out

REMEMBER:  You must use -g,  --save-temps, and -fno-jump-tables whenever compiling with cdi-gcc.

If you want to recompile gcc after making changes to c-parser.c, c-typeck.c, or type_drop.c then simply run cdi/tools/recompile_gcc.bash

