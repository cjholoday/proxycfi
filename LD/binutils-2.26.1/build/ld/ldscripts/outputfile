elf32_x86_64.x
elf32_x86_64.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
81c81
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
---
>   . = .;
143d142
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
185d183
<   . = DATA_SEGMENT_END (.);
elf32_x86_64.xc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc: combine and sort reloc sections */
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
elf32_x86_64.xd
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -pie: link position independent executable */
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
elf32_x86_64.xdc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
elf32_x86_64.xdw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
142,144c144,145
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
elf32_x86_64.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
elf32_x86_64.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
9,10c9,12
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,50
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
>   .text         0 :
54,58c52
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c56
<   .fini           :
---
>   .fini         0 :
66,73c60,64
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c66
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c68
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d71
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c73,76
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c78,80
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d81
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d82
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c84,88
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,154c90,93
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>     *(.data)
>   }
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c96
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d102
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c104
<   .lbss   :
---
>   .lbss 0 :
169c107
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c110
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c112
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c114
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c116
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d117
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c139
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d156
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf32_x86_64.xs
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld --shared: link shared library */
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
43d41
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d42
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d88
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d89
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d92
<     PROVIDE_HIDDEN (__init_array_start = .);
101d94
<     PROVIDE_HIDDEN (__init_array_end = .);
105d97
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d99
<     PROVIDE_HIDDEN (__fini_array_end = .);
elf32_x86_64.xsc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc: shared library, combine & sort relocs */
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
elf32_x86_64.xsw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
142,144c135,136
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
elf32_x86_64.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
9,10c9,12
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,50
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
>   .text         0 :
54,58c52
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c56
<   .fini           :
---
>   .fini         0 :
66,73c60,64
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c66
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c68
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d71
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c73,76
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c78,80
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d81
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d82
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c84,88
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,147c90
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
---
>     *(.data)
150,154c93,94
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c97
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d103
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c105
<   .lbss   :
---
>   .lbss 0 :
169c108
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c111
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c113
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c115
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c117
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d118
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c140
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d157
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf32_x86_64.xw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
142,144c144,145
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
elf_i386.x
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
143c141
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d163
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d165
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
81c79
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
---
>   . = .;
143d140
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
166,171d162
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d164
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
185d166
<   . = DATA_SEGMENT_END (.);
elf_i386.xc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
143c144
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d166
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d168
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xd
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -pie: link position independent executable */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
143c141
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d163
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d165
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xdc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
143c144
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d166
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d168
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xdw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
142,144c143,144
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
166,171d165
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d167
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
143c141
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d163
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d165
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,38
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rel.init     0 : { *(.rel.init) }
>   .rel.text     0 : { *(.rel.text) }
>   .rel.fini     0 : { *(.rel.fini) }
>   .rel.rodata   0 : { *(.rel.rodata) }
>   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
>   .rel.data     0 : { *(.rel.data) }
>   .rel.tdata	0 : { *(.rel.tdata) }
>   .rel.tbss	0 : { *(.rel.tbss) }
>   .rel.ctors    0 : { *(.rel.ctors) }
>   .rel.dtors    0 : { *(.rel.dtors) }
>   .rel.got      0 : { *(.rel.got) }
>   .rel.bss      0 : { *(.rel.bss) }
>   .rel.ifunc    0 : { *(.rel.ifunc) }
>   .rel.plt      0 :
42,45c40
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
47c42
<   .init           :
---
>   .init         0 :
51,52c46,48
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
> .plt.got      0 : { *(.plt.got) }
>   .text         0 :
54,58c50
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c54
<   .fini           :
---
>   .fini         0 :
66,73c58,62
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c64
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c66
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d69
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c71,74
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c76,78
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d79
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d80
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c82,86
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,154c88,91
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>     *(.data)
>   }
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c94
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164,181d100
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
183,185d101
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c123
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d140
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_i386.xs
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld --shared: link shared library */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c23,36
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c38,39
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       *(.rel.iplt)
51a46
> .plt.got        : { *(.plt.got) }
92d86
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d87
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d90
<     PROVIDE_HIDDEN (__init_array_start = .);
101d92
<     PROVIDE_HIDDEN (__init_array_end = .);
105d95
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d97
<     PROVIDE_HIDDEN (__fini_array_end = .);
143c132
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d154
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d156
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xsc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c23
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c25,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       *(.rel.iplt)
51a49
> .plt.got        : { *(.plt.got) }
92d89
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d90
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d93
<     PROVIDE_HIDDEN (__init_array_start = .);
101d95
<     PROVIDE_HIDDEN (__init_array_end = .);
105d98
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d100
<     PROVIDE_HIDDEN (__fini_array_end = .);
143c135
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d157
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d159
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xsw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c23
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c25,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       *(.rel.iplt)
51a49
> .plt.got        : { *(.plt.got) }
92d89
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d90
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d93
<     PROVIDE_HIDDEN (__init_array_start = .);
101d95
<     PROVIDE_HIDDEN (__init_array_end = .);
105d98
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d100
<     PROVIDE_HIDDEN (__fini_array_end = .);
142,144c134,135
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
166,171d156
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d158
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_i386.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,38
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rel.init     0 : { *(.rel.init) }
>   .rel.text     0 : { *(.rel.text) }
>   .rel.fini     0 : { *(.rel.fini) }
>   .rel.rodata   0 : { *(.rel.rodata) }
>   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
>   .rel.data     0 : { *(.rel.data) }
>   .rel.tdata	0 : { *(.rel.tdata) }
>   .rel.tbss	0 : { *(.rel.tbss) }
>   .rel.ctors    0 : { *(.rel.ctors) }
>   .rel.dtors    0 : { *(.rel.dtors) }
>   .rel.got      0 : { *(.rel.got) }
>   .rel.bss      0 : { *(.rel.bss) }
>   .rel.ifunc    0 : { *(.rel.ifunc) }
>   .rel.plt      0 :
42,45c40
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
47c42
<   .init           :
---
>   .init         0 :
51,52c46,48
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
> .plt.got      0 : { *(.plt.got) }
>   .text         0 :
54,58c50
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c54
<   .fini           :
---
>   .fini         0 :
66,73c58,62
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c64
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c66
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d69
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c71,74
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c76,78
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d79
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d80
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c82,86
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,147c88
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
---
>     *(.data)
150,154c91,92
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c95
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164,181d101
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
183,185d102
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c124
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d141
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_i386.xw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> 	      "elf32-i386")
> OUTPUT_ARCH(i386)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
142,144c143,144
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
166,171d165
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d167
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.x
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
143c141
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d163
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d165
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
81c79
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
---
>   . = .;
143d140
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
166,171d162
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d164
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
185d166
<   . = DATA_SEGMENT_END (.);
elf_iamcu.xc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
143c144
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d166
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d168
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xd
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -pie: link position independent executable */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
143c141
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d163
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d165
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xdc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
143c144
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d166
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d168
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xdw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
142,144c143,144
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
166,171d165
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d167
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24,37
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c39,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a49
> .plt.got        : { *(.plt.got) }
143c141
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d163
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d165
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,38
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rel.init     0 : { *(.rel.init) }
>   .rel.text     0 : { *(.rel.text) }
>   .rel.fini     0 : { *(.rel.fini) }
>   .rel.rodata   0 : { *(.rel.rodata) }
>   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
>   .rel.data     0 : { *(.rel.data) }
>   .rel.tdata	0 : { *(.rel.tdata) }
>   .rel.tbss	0 : { *(.rel.tbss) }
>   .rel.ctors    0 : { *(.rel.ctors) }
>   .rel.dtors    0 : { *(.rel.dtors) }
>   .rel.got      0 : { *(.rel.got) }
>   .rel.bss      0 : { *(.rel.bss) }
>   .rel.ifunc    0 : { *(.rel.ifunc) }
>   .rel.plt      0 :
42,45c40
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
47c42
<   .init           :
---
>   .init         0 :
51,52c46,48
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
> .plt.got      0 : { *(.plt.got) }
>   .text         0 :
54,58c50
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c54
<   .fini           :
---
>   .fini         0 :
66,73c58,62
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c64
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c66
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d69
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c71,74
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c76,78
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d79
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d80
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c82,86
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,154c88,91
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>     *(.data)
>   }
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c94
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164,181d100
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
183,185d101
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c123
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d140
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_iamcu.xs
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld --shared: link shared library */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c23,36
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.init       : { *(.rel.init) }
>   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
>   .rel.fini       : { *(.rel.fini) }
>   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
>   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
>   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
>   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
>   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
>   .rel.ctors      : { *(.rel.ctors) }
>   .rel.dtors      : { *(.rel.dtors) }
>   .rel.got        : { *(.rel.got) }
>   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
>   .rel.ifunc      : { *(.rel.ifunc) }
>   .rel.plt        :
42,45c38,39
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
>       *(.rel.iplt)
51a46
> .plt.got        : { *(.plt.got) }
92d86
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d87
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d90
<     PROVIDE_HIDDEN (__init_array_start = .);
101d92
<     PROVIDE_HIDDEN (__init_array_end = .);
105d95
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d97
<     PROVIDE_HIDDEN (__fini_array_end = .);
143c132
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d154
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d156
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xsc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c23
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c25,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       *(.rel.iplt)
51a49
> .plt.got        : { *(.plt.got) }
92d89
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d90
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d93
<     PROVIDE_HIDDEN (__init_array_start = .);
101d95
<     PROVIDE_HIDDEN (__init_array_end = .);
105d98
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d100
<     PROVIDE_HIDDEN (__fini_array_end = .);
143c135
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
---
>   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
166,171d157
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d159
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xsw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,40c23
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c25,42
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       *(.rel.iplt)
51a49
> .plt.got        : { *(.plt.got) }
92d89
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d90
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d93
<     PROVIDE_HIDDEN (__init_array_start = .);
101d95
<     PROVIDE_HIDDEN (__init_array_end = .);
105d98
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d100
<     PROVIDE_HIDDEN (__fini_array_end = .);
142,144c134,135
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
166,171d156
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d158
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_iamcu.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,38
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rel.init     0 : { *(.rel.init) }
>   .rel.text     0 : { *(.rel.text) }
>   .rel.fini     0 : { *(.rel.fini) }
>   .rel.rodata   0 : { *(.rel.rodata) }
>   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
>   .rel.data     0 : { *(.rel.data) }
>   .rel.tdata	0 : { *(.rel.tdata) }
>   .rel.tbss	0 : { *(.rel.tbss) }
>   .rel.ctors    0 : { *(.rel.ctors) }
>   .rel.dtors    0 : { *(.rel.dtors) }
>   .rel.got      0 : { *(.rel.got) }
>   .rel.bss      0 : { *(.rel.bss) }
>   .rel.ifunc    0 : { *(.rel.ifunc) }
>   .rel.plt      0 :
42,45c40
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.plt)
47c42
<   .init           :
---
>   .init         0 :
51,52c46,48
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
> .plt.got      0 : { *(.plt.got) }
>   .text         0 :
54,58c50
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c54
<   .fini           :
---
>   .fini         0 :
66,73c58,62
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c64
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c66
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d69
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c71,74
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c76,78
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d79
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d80
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c82,86
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,147c88
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
---
>     *(.data)
150,154c91,92
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c95
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164,181d101
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
183,185d102
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c124
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d141
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_iamcu.xw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> 	      "elf32-iamcu")
> OUTPUT_ARCH(iamcu)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
24,40c24
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .rel.dyn        :
42,45c26,45
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
---
>       *(.rel.init)
>       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
>       *(.rel.fini)
>       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
>       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
>       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
>       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
>       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
>       *(.rel.ctors)
>       *(.rel.dtors)
>       *(.rel.got)
>       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
>       *(.rel.ifunc)
>     }
>   .rel.plt        :
>     {
>       *(.rel.plt)
>       PROVIDE_HIDDEN (__rel_iplt_start = .);
>       *(.rel.iplt)
>       PROVIDE_HIDDEN (__rel_iplt_end = .);
51a52
> .plt.got        : { *(.plt.got) }
142,144c143,144
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
166,171d165
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
174,182d167
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
elf_k1om.x
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
164c164
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c172
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c181
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c183
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
81c81
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
---
>   . = .;
143d142
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
164c163
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c171
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c180
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c182
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
185d183
<   . = DATA_SEGMENT_END (.);
elf_k1om.xc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xd
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -pie: link position independent executable */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
164c164
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c172
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c181
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c183
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xdc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xdw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
142,144c144,145
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c165
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c173
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c182
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c184
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
164c164
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c172
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c181
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c183
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,50
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
>   .text         0 :
54,58c52
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c56
<   .fini           :
---
>   .fini         0 :
66,73c60,64
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c66
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c68
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d71
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c73,76
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c78,80
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d81
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d82
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c84,88
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,154c90,93
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>     *(.data)
>   }
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c96
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d102
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c104
<   .lbss   :
---
>   .lbss 0 :
169c107
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c110
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c112
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c114
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c116
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d117
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c139
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d156
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_k1om.xs
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld --shared: link shared library */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
43d41
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d42
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d88
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d89
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d92
<     PROVIDE_HIDDEN (__init_array_start = .);
101d94
<     PROVIDE_HIDDEN (__init_array_end = .);
105d97
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d99
<     PROVIDE_HIDDEN (__fini_array_end = .);
164c155
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c163
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c172
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xsc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
164c157
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c165
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c174
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c176
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xsw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
142,144c135,136
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c156
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c164
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c173
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c175
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_k1om.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,50
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
>   .text         0 :
54,58c52
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c56
<   .fini           :
---
>   .fini         0 :
66,73c60,64
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c66
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c68
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d71
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c73,76
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c78,80
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d81
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d82
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c84,88
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,147c90
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
---
>     *(.data)
150,154c93,94
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c97
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d103
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c105
<   .lbss   :
---
>   .lbss 0 :
169c108
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c111
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c113
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c115
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c117
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d118
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c140
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d157
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_k1om.xw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> 	      "elf64-k1om")
> OUTPUT_ARCH(k1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
142,144c144,145
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c165
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c173
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c182
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c184
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.x
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
164c164
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c172
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c181
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c183
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
81c81
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
---
>   . = .;
143d142
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
164c163
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c171
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c180
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c182
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
185d183
<   . = DATA_SEGMENT_END (.);
elf_l1om.xc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xd
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -pie: link position independent executable */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
164c164
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c172
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c181
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c183
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xdc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xdw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
142,144c144,145
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c165
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c173
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c182
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c184
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
164c164
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c172
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c181
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c183
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,50
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
>   .text         0 :
54,58c52
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c56
<   .fini           :
---
>   .fini         0 :
66,73c60,64
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c66
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c68
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d71
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c73,76
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c78,80
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d81
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d82
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c84,88
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,154c90,93
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>     *(.data)
>   }
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c96
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d102
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c104
<   .lbss   :
---
>   .lbss 0 :
169c107
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c110
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c112
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c114
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c116
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d117
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c139
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d156
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_l1om.xs
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld --shared: link shared library */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
43d41
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d42
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d88
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d89
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d92
<     PROVIDE_HIDDEN (__init_array_start = .);
101d94
<     PROVIDE_HIDDEN (__init_array_end = .);
105d97
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d99
<     PROVIDE_HIDDEN (__fini_array_end = .);
164c155
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c163
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c172
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xsc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
164c157
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c165
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c174
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c176
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xsw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
142,144c135,136
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c156
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c164
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c173
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c175
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_l1om.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,50
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
>   .text         0 :
54,58c52
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c56
<   .fini           :
---
>   .fini         0 :
66,73c60,64
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c66
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c68
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d71
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c73,76
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c78,80
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d81
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d82
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c84,88
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,147c90
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
---
>     *(.data)
150,154c93,94
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c97
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d103
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c105
<   .lbss   :
---
>   .lbss 0 :
169c108
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c111
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c113
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c115
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c117
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d118
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c140
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d157
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_l1om.xw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> 	      "elf64-l1om")
> OUTPUT_ARCH(l1om)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
142,144c144,145
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c165
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c173
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c182
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c184
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.x
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
51a52,53
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
51a52,53
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
81c83
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
---
>   . = .;
143d144
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
164c165
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c173
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c182
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c184
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
185d185
<   . = DATA_SEGMENT_END (.);
elf_x86_64.xc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
51a54,55
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
164c168
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c176
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c185
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c187
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xd
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -pie: link position independent executable */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
51a52,53
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xdc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
51a54,55
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
164c168
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c176
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c185
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c187
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xdw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
---
>   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
51a54,55
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
142,144c146,147
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c167
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c175
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c184
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c186
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
51a52,53
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
164c166
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c174
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c183
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c185
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,52
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
> .plt.got      0 : { *(.plt.got) }
> .plt.bnd      0 : { *(.plt.bnd) }
>   .text         0 :
54,58c54
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c58
<   .fini           :
---
>   .fini         0 :
66,73c62,66
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c68
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c70
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d73
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c75,78
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c80,82
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d83
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d84
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c86,90
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,154c92,95
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>     *(.data)
>   }
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c98
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d104
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c106
<   .lbss   :
---
>   .lbss 0 :
169c109
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c112
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c114
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c116
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c118
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d119
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c141
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d158
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_x86_64.xs
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld --shared: link shared library */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
43d41
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d42
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
51a49,50
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
92d90
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d91
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d94
<     PROVIDE_HIDDEN (__init_array_start = .);
101d96
<     PROVIDE_HIDDEN (__init_array_end = .);
105d99
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d101
<     PROVIDE_HIDDEN (__fini_array_end = .);
164c157
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c165
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c174
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c176
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xsc
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
51a51,52
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
92d92
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d93
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d96
<     PROVIDE_HIDDEN (__init_array_start = .);
101d98
<     PROVIDE_HIDDEN (__init_array_end = .);
105d101
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d103
<     PROVIDE_HIDDEN (__fini_array_end = .);
164c159
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c167
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c176
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c178
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xsw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
14,15c14
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
24,39c23,40
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
43d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
45d44
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
51a51,52
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
92d92
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d93
<     PROVIDE_HIDDEN (__preinit_array_end = .);
98d96
<     PROVIDE_HIDDEN (__init_array_start = .);
101d98
<     PROVIDE_HIDDEN (__init_array_end = .);
105d101
<     PROVIDE_HIDDEN (__fini_array_start = .);
108d103
<     PROVIDE_HIDDEN (__fini_array_end = .);
142,144c137,138
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c158
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c166
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c175
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c177
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
elf_x86_64.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
6,10c6,12
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
>  /* For some reason, the Solaris linker makes bad executables
>   if gld -r is used and the intermediate file has sections starting
>   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
>   bug.  But for now assigning the zero vmas works.  */
14,15c16
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
---
>   .interp       0 : { *(.interp) }
17,40c18,41
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
---
>   .hash         0 : { *(.hash) }
>   .gnu.hash     0 : { *(.gnu.hash) }
>   .dynsym       0 : { *(.dynsym) }
>   .dynstr       0 : { *(.dynstr) }
>   .gnu.version  0 : { *(.gnu.version) }
>   .gnu.version_d 0: { *(.gnu.version_d) }
>   .gnu.version_r 0: { *(.gnu.version_r) }
>   .rela.init    0 : { *(.rela.init) }
>   .rela.text    0 : { *(.rela.text) }
>   .rela.fini    0 : { *(.rela.fini) }
>   .rela.rodata  0 : { *(.rela.rodata) }
>   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
>   .rela.data    0 : { *(.rela.data) }
>   .rela.tdata	0 : { *(.rela.tdata) }
>   .rela.tbss	0 : { *(.rela.tbss) }
>   .rela.ctors   0 : { *(.rela.ctors) }
>   .rela.dtors   0 : { *(.rela.dtors) }
>   .rela.got     0 : { *(.rela.got) }
>   .rela.bss     0 : { *(.rela.bss) }
>   .rela.ldata   0 : { *(.rela.ldata) }
>   .rela.lbss    0 : { *(.rela.lbss) }
>   .rela.lrodata 0 : { *(.rela.lrodata) }
>   .rela.ifunc   0 : { *(.rela.ifunc) }
>   .rela.plt     0 :
43,45d43
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
47c45
<   .init           :
---
>   .init         0 :
51,52c49,52
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .plt          0 : { *(.plt) *(.iplt) }
> .plt.got      0 : { *(.plt.got) }
> .plt.bnd      0 : { *(.plt.bnd) }
>   .text         0 :
54,58c54
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
---
>     *(.text .stub)
62c58
<   .fini           :
---
>   .fini         0 :
66,73c62,66
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
---
>   .rodata       0 : { *(.rodata) }
>   .rodata1      0 : { *(.rodata1) }
>   .eh_frame_hdr : { *(.eh_frame_hdr)  }
>   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
>   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
75c68
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
---
>   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
77c70
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
---
>   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
81d73
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
83,86c75,78
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
---
>   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
>   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
>   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
>   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
88,90c80,82
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
---
>   .tdata	0 : { *(.tdata) }
>   .tbss		0 : { *(.tbss) }
>   .preinit_array   0 :
92d83
<     PROVIDE_HIDDEN (__preinit_array_start = .);
94d84
<     PROVIDE_HIDDEN (__preinit_array_end = .);
96c86,90
<   .init_array     :
---
>   .jcr          0 : { KEEP (*(.jcr)) }
>   .dynamic      0 : { *(.dynamic) }
>   .got          0 : { *(.got) *(.igot) }
>   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
>   .data         0 :
98,147c92
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
---
>     *(.data)
150,154c95,96
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
---
>   .data1        0 : { *(.data1) }
>   .bss          0 :
157c99
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    *(.bss)
164d105
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
166c107
<   .lbss   :
---
>   .lbss 0 :
169c110
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
---
>     *(.lbss)
172,174c113
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .lrodata 0  :
176c115
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
---
>     *(.lrodata)
178c117
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
---
>   .ldata 0  :
180,181c119
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     *(.ldata)
183,185d120
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
207c142
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
---
>   .debug_info     0 : { *(.debug_info) }
225d159
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
elf_x86_64.xw
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
6,8c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
---
> OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> 	      "elf64-x86-64")
> OUTPUT_ARCH(i386:x86-64)
10c10
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
24,39c24,41
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
---
>   .rela.dyn       :
>     {
>       *(.rela.init)
>       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
>       *(.rela.fini)
>       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
>       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
>       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
>       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
>       *(.rela.ctors)
>       *(.rela.dtors)
>       *(.rela.got)
>       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
>       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
>       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
>       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
>       *(.rela.ifunc)
>     }
51a54,55
> .plt.got        : { *(.plt.got) }
> .plt.bnd        : { *(.plt.bnd) }
142,144c146,147
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
---
>   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
>   . = DATA_SEGMENT_RELRO_END (0, .);
164c167
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(. != 0 ? 64 / 8 : 1);
172c175
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
181c184
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     . = ALIGN(. != 0 ? 64 / 8 : 1);
183c186
<   . = ALIGN(32 / 8);
---
>   . = ALIGN(64 / 8);
i386linux.x
6,10c6,10
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> 	      "a.out-i386-linux")
> OUTPUT_ARCH(i386)
> SEARCH_DIR("/usr/i386-pc-linux-gnuaout/lib");
> PROVIDE (__stack = 0);
13,47c13,14
<   /* Read-only sections, merged into text segment: */
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
<   .note.gnu.build-id : { *(.note.gnu.build-id) }
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
<     {
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
<     }
<   .init           :
---
>   . = 0x1020;
>   .text :
49c16,40
<     KEEP (*(SORT_NONE(.init)))
---
>     CREATE_OBJECT_SYMBOLS
>     *(.text)
>     /* The next six sections are for SunOS dynamic linking.  The order
>        is important.  */
>     *(.dynrel)
>     *(.hash)
>     *(.dynsym)
>     *(.dynstr)
>     *(.rules)
>     *(.need)
>     _etext = .;
>     __etext = .;
>   }
>   . = ALIGN(0x1000);
>   .data :
>   {
>     /* The first three sections are for SunOS dynamic linking.  */
>     *(.dynamic)
>     *(.got)
>     *(.plt)
>     *(.data)
>     *(.linux-dynamic) /* For Linux dynamic linking.  */
>     CONSTRUCTORS
>     _edata  =  .;
>     __edata  =  .;
51,52c42
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .bss :
54,157c44,45
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
<     /* .gnu.warning sections are handled specially by elf32.em.  */
<     *(.gnu.warning)
<   }
<   .fini           :
<   {
<     KEEP (*(SORT_NONE(.fini)))
<   }
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
<   .gcc_except_table.*) }
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
<   /* These sections are generated by the Sun/Oracle C++ compiler.  */
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
<   .exception_ranges*) }
<   /* Adjust the address for the data segment.  We want to adjust up to
<      the same address within the page on the next page up.  */
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
<   /* Exception handling  */
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
<   /* Thread Local Storage sections  */
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
<   {
<     PROVIDE_HIDDEN (__preinit_array_start = .);
<     KEEP (*(.preinit_array))
<     PROVIDE_HIDDEN (__preinit_array_end = .);
<   }
<   .init_array     :
<   {
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
<   {
<    *(.dynbss)
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>     __bss_start = .;
>    *(.bss)
159,181c47,49
<    /* Align here to ensure that the .bss section occupies space up to
<       _end.  Align after .bss to ensure correct alignment even if the
<       .bss section disappears because there are no input sections.
<       FIXME: Why do we need it? When there is no .bss section, we don't
<       pad the .data section.  */
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(4);
>    _end = . ;
>    __end = . ;
183,225d50
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
<   /* Stabs debugging sections.  */
<   .stab          0 : { *(.stab) }
<   .stabstr       0 : { *(.stabstr) }
<   .stab.excl     0 : { *(.stab.excl) }
<   .stab.exclstr  0 : { *(.stab.exclstr) }
<   .stab.index    0 : { *(.stab.index) }
<   .stab.indexstr 0 : { *(.stab.indexstr) }
<   .comment       0 : { *(.comment) }
<   /* DWARF debug sections.
<      Symbols in the DWARF debugging sections are relative to the beginning
<      of the section so we begin them at 0.  */
<   /* DWARF 1 */
<   .debug          0 : { *(.debug) }
<   .line           0 : { *(.line) }
<   /* GNU DWARF 1 extensions */
<   .debug_srcinfo  0 : { *(.debug_srcinfo) }
<   .debug_sfnames  0 : { *(.debug_sfnames) }
<   /* DWARF 1.1 and DWARF 2 */
<   .debug_aranges  0 : { *(.debug_aranges) }
<   .debug_pubnames 0 : { *(.debug_pubnames) }
<   /* DWARF 2 */
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
<   .debug_abbrev   0 : { *(.debug_abbrev) }
<   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
<   .debug_frame    0 : { *(.debug_frame) }
<   .debug_str      0 : { *(.debug_str) }
<   .debug_loc      0 : { *(.debug_loc) }
<   .debug_macinfo  0 : { *(.debug_macinfo) }
<   /* SGI/MIPS DWARF 2 extensions */
<   .debug_weaknames 0 : { *(.debug_weaknames) }
<   .debug_funcnames 0 : { *(.debug_funcnames) }
<   .debug_typenames 0 : { *(.debug_typenames) }
<   .debug_varnames  0 : { *(.debug_varnames) }
<   /* DWARF 3 */
<   .debug_pubtypes 0 : { *(.debug_pubtypes) }
<   .debug_ranges   0 : { *(.debug_ranges) }
<   /* DWARF Extension.  */
<   .debug_macro    0 : { *(.debug_macro) }
<   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
i386linux.xbn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -N: mix text and data on same page; don't align data */
6,10c6,10
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> 	      "a.out-i386-linux")
> OUTPUT_ARCH(i386)
> SEARCH_DIR("/usr/i386-pc-linux-gnuaout/lib");
> PROVIDE (__stack = 0);
13,47c13,14
<   /* Read-only sections, merged into text segment: */
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
<   .note.gnu.build-id : { *(.note.gnu.build-id) }
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
<     {
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
<     }
<   .init           :
---
>   . = 0;
>   .text :
49c16,27
<     KEEP (*(SORT_NONE(.init)))
---
>     CREATE_OBJECT_SYMBOLS
>     *(.text)
>     /* The next six sections are for SunOS dynamic linking.  The order
>        is important.  */
>     *(.dynrel)
>     *(.hash)
>     *(.dynsym)
>     *(.dynstr)
>     *(.rules)
>     *(.need)
>     _etext = .;
>     __etext = .;
51,151d28
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
<   {
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
<     /* .gnu.warning sections are handled specially by elf32.em.  */
<     *(.gnu.warning)
<   }
<   .fini           :
<   {
<     KEEP (*(SORT_NONE(.fini)))
<   }
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
<   .gcc_except_table.*) }
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
<   /* These sections are generated by the Sun/Oracle C++ compiler.  */
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
<   .exception_ranges*) }
<   /* Adjust the address for the data segment.  We want to adjust up to
<      the same address within the page on the next page up.  */
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
<   /* Exception handling  */
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
<   /* Thread Local Storage sections  */
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
<   {
<     PROVIDE_HIDDEN (__preinit_array_start = .);
<     KEEP (*(.preinit_array))
<     PROVIDE_HIDDEN (__preinit_array_end = .);
<   }
<   .init_array     :
<   {
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
153,154c30
<   __bss_start = .;
<   .bss            :
---
>   .data :
156,164c32,40
<    *(.dynbss)
<    *(.bss .bss.* .gnu.linkonce.b.*)
<    *(COMMON)
<    /* Align here to ensure that the .bss section occupies space up to
<       _end.  Align after .bss to ensure correct alignment even if the
<       .bss section disappears because there are no input sections.
<       FIXME: Why do we need it? When there is no .bss section, we don't
<       pad the .data section.  */
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     /* The first three sections are for SunOS dynamic linking.  */
>     *(.dynamic)
>     *(.got)
>     *(.plt)
>     *(.data)
>     *(.linux-dynamic) /* For Linux dynamic linking.  */
>     CONSTRUCTORS
>     _edata  =  .;
>     __edata  =  .;
166c42
<   .lbss   :
---
>   .bss :
168,181c44,49
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>     __bss_start = .;
>    *(.bss)
>    *(COMMON)
>    . = ALIGN(4);
>    _end = . ;
>    __end = . ;
183,225d50
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
<   /* Stabs debugging sections.  */
<   .stab          0 : { *(.stab) }
<   .stabstr       0 : { *(.stabstr) }
<   .stab.excl     0 : { *(.stab.excl) }
<   .stab.exclstr  0 : { *(.stab.exclstr) }
<   .stab.index    0 : { *(.stab.index) }
<   .stab.indexstr 0 : { *(.stab.indexstr) }
<   .comment       0 : { *(.comment) }
<   /* DWARF debug sections.
<      Symbols in the DWARF debugging sections are relative to the beginning
<      of the section so we begin them at 0.  */
<   /* DWARF 1 */
<   .debug          0 : { *(.debug) }
<   .line           0 : { *(.line) }
<   /* GNU DWARF 1 extensions */
<   .debug_srcinfo  0 : { *(.debug_srcinfo) }
<   .debug_sfnames  0 : { *(.debug_sfnames) }
<   /* DWARF 1.1 and DWARF 2 */
<   .debug_aranges  0 : { *(.debug_aranges) }
<   .debug_pubnames 0 : { *(.debug_pubnames) }
<   /* DWARF 2 */
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
<   .debug_abbrev   0 : { *(.debug_abbrev) }
<   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
<   .debug_frame    0 : { *(.debug_frame) }
<   .debug_str      0 : { *(.debug_str) }
<   .debug_loc      0 : { *(.debug_loc) }
<   .debug_macinfo  0 : { *(.debug_macinfo) }
<   /* SGI/MIPS DWARF 2 extensions */
<   .debug_weaknames 0 : { *(.debug_weaknames) }
<   .debug_funcnames 0 : { *(.debug_funcnames) }
<   .debug_typenames 0 : { *(.debug_typenames) }
<   .debug_varnames  0 : { *(.debug_varnames) }
<   /* DWARF 3 */
<   .debug_pubtypes 0 : { *(.debug_pubtypes) }
<   .debug_ranges   0 : { *(.debug_ranges) }
<   /* DWARF Extension.  */
<   .debug_macro    0 : { *(.debug_macro) }
<   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
i386linux.xn
1c1
< /* Default linker script, for normal executables */
---
> /* Script for -n: mix text and data on same page */
6,10c6,10
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> 	      "a.out-i386-linux")
> OUTPUT_ARCH(i386)
> SEARCH_DIR("/usr/i386-pc-linux-gnuaout/lib");
> PROVIDE (__stack = 0);
13,47c13,14
<   /* Read-only sections, merged into text segment: */
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
<   .note.gnu.build-id : { *(.note.gnu.build-id) }
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
<     {
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
<     }
<   .init           :
---
>   . = 0;
>   .text :
49c16,40
<     KEEP (*(SORT_NONE(.init)))
---
>     CREATE_OBJECT_SYMBOLS
>     *(.text)
>     /* The next six sections are for SunOS dynamic linking.  The order
>        is important.  */
>     *(.dynrel)
>     *(.hash)
>     *(.dynsym)
>     *(.dynstr)
>     *(.rules)
>     *(.need)
>     _etext = .;
>     __etext = .;
>   }
>   . = ALIGN(0x1000);
>   .data :
>   {
>     /* The first three sections are for SunOS dynamic linking.  */
>     *(.dynamic)
>     *(.got)
>     *(.plt)
>     *(.data)
>     *(.linux-dynamic) /* For Linux dynamic linking.  */
>     CONSTRUCTORS
>     _edata  =  .;
>     __edata  =  .;
51,52c42
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .bss :
54,157c44,45
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
<     /* .gnu.warning sections are handled specially by elf32.em.  */
<     *(.gnu.warning)
<   }
<   .fini           :
<   {
<     KEEP (*(SORT_NONE(.fini)))
<   }
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
<   .gcc_except_table.*) }
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
<   /* These sections are generated by the Sun/Oracle C++ compiler.  */
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
<   .exception_ranges*) }
<   /* Adjust the address for the data segment.  We want to adjust up to
<      the same address within the page on the next page up.  */
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
<   /* Exception handling  */
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
<   /* Thread Local Storage sections  */
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
<   {
<     PROVIDE_HIDDEN (__preinit_array_start = .);
<     KEEP (*(.preinit_array))
<     PROVIDE_HIDDEN (__preinit_array_end = .);
<   }
<   .init_array     :
<   {
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
<   {
<    *(.dynbss)
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>     __bss_start = .;
>    *(.bss)
159,181c47,49
<    /* Align here to ensure that the .bss section occupies space up to
<       _end.  Align after .bss to ensure correct alignment even if the
<       .bss section disappears because there are no input sections.
<       FIXME: Why do we need it? When there is no .bss section, we don't
<       pad the .data section.  */
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    . = ALIGN(4);
>    _end = . ;
>    __end = . ;
183,225d50
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
<   /* Stabs debugging sections.  */
<   .stab          0 : { *(.stab) }
<   .stabstr       0 : { *(.stabstr) }
<   .stab.excl     0 : { *(.stab.excl) }
<   .stab.exclstr  0 : { *(.stab.exclstr) }
<   .stab.index    0 : { *(.stab.index) }
<   .stab.indexstr 0 : { *(.stab.indexstr) }
<   .comment       0 : { *(.comment) }
<   /* DWARF debug sections.
<      Symbols in the DWARF debugging sections are relative to the beginning
<      of the section so we begin them at 0.  */
<   /* DWARF 1 */
<   .debug          0 : { *(.debug) }
<   .line           0 : { *(.line) }
<   /* GNU DWARF 1 extensions */
<   .debug_srcinfo  0 : { *(.debug_srcinfo) }
<   .debug_sfnames  0 : { *(.debug_sfnames) }
<   /* DWARF 1.1 and DWARF 2 */
<   .debug_aranges  0 : { *(.debug_aranges) }
<   .debug_pubnames 0 : { *(.debug_pubnames) }
<   /* DWARF 2 */
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
<   .debug_abbrev   0 : { *(.debug_abbrev) }
<   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
<   .debug_frame    0 : { *(.debug_frame) }
<   .debug_str      0 : { *(.debug_str) }
<   .debug_loc      0 : { *(.debug_loc) }
<   .debug_macinfo  0 : { *(.debug_macinfo) }
<   /* SGI/MIPS DWARF 2 extensions */
<   .debug_weaknames 0 : { *(.debug_weaknames) }
<   .debug_funcnames 0 : { *(.debug_funcnames) }
<   .debug_typenames 0 : { *(.debug_typenames) }
<   .debug_varnames  0 : { *(.debug_varnames) }
<   /* DWARF 3 */
<   .debug_pubtypes 0 : { *(.debug_pubtypes) }
<   .debug_ranges   0 : { *(.debug_ranges) }
<   /* DWARF Extension.  */
<   .debug_macro    0 : { *(.debug_macro) }
<   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
i386linux.xr
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -r: link without relocation */
6,10c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> 	      "a.out-i386-linux")
> OUTPUT_ARCH(i386)
13,47c11
<   /* Read-only sections, merged into text segment: */
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
<   .note.gnu.build-id : { *(.note.gnu.build-id) }
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
<     {
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
<     }
<   .init           :
---
>   .text :
49c13,31
<     KEEP (*(SORT_NONE(.init)))
---
>     CREATE_OBJECT_SYMBOLS
>     *(.text)
>     /* The next six sections are for SunOS dynamic linking.  The order
>        is important.  */
>     *(.dynrel)
>     *(.hash)
>     *(.dynsym)
>     *(.dynstr)
>     *(.rules)
>     *(.need)
>   }
>   .data :
>   {
>     /* The first three sections are for SunOS dynamic linking.  */
>     *(.dynamic)
>     *(.got)
>     *(.plt)
>     *(.data)
>     *(.linux-dynamic) /* For Linux dynamic linking.  */
51,52c33
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .bss :
54,157c35,36
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
<     /* .gnu.warning sections are handled specially by elf32.em.  */
<     *(.gnu.warning)
<   }
<   .fini           :
<   {
<     KEEP (*(SORT_NONE(.fini)))
<   }
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
<   .gcc_except_table.*) }
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
<   /* These sections are generated by the Sun/Oracle C++ compiler.  */
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
<   .exception_ranges*) }
<   /* Adjust the address for the data segment.  We want to adjust up to
<      the same address within the page on the next page up.  */
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
<   /* Exception handling  */
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
<   /* Thread Local Storage sections  */
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
<   {
<     PROVIDE_HIDDEN (__preinit_array_start = .);
<     KEEP (*(.preinit_array))
<     PROVIDE_HIDDEN (__preinit_array_end = .);
<   }
<   .init_array     :
<   {
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
<   {
<    *(.dynbss)
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    ;
>    *(.bss)
159,181c38,39
<    /* Align here to ensure that the .bss section occupies space up to
<       _end.  Align after .bss to ensure correct alignment even if the
<       .bss section disappears because there are no input sections.
<       FIXME: Why do we need it? When there is no .bss section, we don't
<       pad the .data section.  */
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    ;
>    ;
183,225d40
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
<   /* Stabs debugging sections.  */
<   .stab          0 : { *(.stab) }
<   .stabstr       0 : { *(.stabstr) }
<   .stab.excl     0 : { *(.stab.excl) }
<   .stab.exclstr  0 : { *(.stab.exclstr) }
<   .stab.index    0 : { *(.stab.index) }
<   .stab.indexstr 0 : { *(.stab.indexstr) }
<   .comment       0 : { *(.comment) }
<   /* DWARF debug sections.
<      Symbols in the DWARF debugging sections are relative to the beginning
<      of the section so we begin them at 0.  */
<   /* DWARF 1 */
<   .debug          0 : { *(.debug) }
<   .line           0 : { *(.line) }
<   /* GNU DWARF 1 extensions */
<   .debug_srcinfo  0 : { *(.debug_srcinfo) }
<   .debug_sfnames  0 : { *(.debug_sfnames) }
<   /* DWARF 1.1 and DWARF 2 */
<   .debug_aranges  0 : { *(.debug_aranges) }
<   .debug_pubnames 0 : { *(.debug_pubnames) }
<   /* DWARF 2 */
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
<   .debug_abbrev   0 : { *(.debug_abbrev) }
<   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
<   .debug_frame    0 : { *(.debug_frame) }
<   .debug_str      0 : { *(.debug_str) }
<   .debug_loc      0 : { *(.debug_loc) }
<   .debug_macinfo  0 : { *(.debug_macinfo) }
<   /* SGI/MIPS DWARF 2 extensions */
<   .debug_weaknames 0 : { *(.debug_weaknames) }
<   .debug_funcnames 0 : { *(.debug_funcnames) }
<   .debug_typenames 0 : { *(.debug_typenames) }
<   .debug_varnames  0 : { *(.debug_varnames) }
<   /* DWARF 3 */
<   .debug_pubtypes 0 : { *(.debug_pubtypes) }
<   .debug_ranges   0 : { *(.debug_ranges) }
<   /* DWARF Extension.  */
<   .debug_macro    0 : { *(.debug_macro) }
<   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
i386linux.xu
1c1
< /* Default linker script, for normal executables */
---
> /* Script for ld -Ur: link w/out relocation, do create constructors */
6,10c6,8
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
---
> OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> 	      "a.out-i386-linux")
> OUTPUT_ARCH(i386)
13,47c11
<   /* Read-only sections, merged into text segment: */
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
<   .note.gnu.build-id : { *(.note.gnu.build-id) }
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
<     {
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
<     }
<   .init           :
---
>   .text :
49c13,32
<     KEEP (*(SORT_NONE(.init)))
---
>     CREATE_OBJECT_SYMBOLS
>     *(.text)
>     /* The next six sections are for SunOS dynamic linking.  The order
>        is important.  */
>     *(.dynrel)
>     *(.hash)
>     *(.dynsym)
>     *(.dynstr)
>     *(.rules)
>     *(.need)
>   }
>   .data :
>   {
>     /* The first three sections are for SunOS dynamic linking.  */
>     *(.dynamic)
>     *(.got)
>     *(.plt)
>     *(.data)
>     *(.linux-dynamic) /* For Linux dynamic linking.  */
>     CONSTRUCTORS
51,52c34
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
---
>   .bss :
54,157c36,37
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
<     /* .gnu.warning sections are handled specially by elf32.em.  */
<     *(.gnu.warning)
<   }
<   .fini           :
<   {
<     KEEP (*(SORT_NONE(.fini)))
<   }
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
<   .gcc_except_table.*) }
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
<   /* These sections are generated by the Sun/Oracle C++ compiler.  */
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
<   .exception_ranges*) }
<   /* Adjust the address for the data segment.  We want to adjust up to
<      the same address within the page on the next page up.  */
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
<   /* Exception handling  */
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
<   /* Thread Local Storage sections  */
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
<   {
<     PROVIDE_HIDDEN (__preinit_array_start = .);
<     KEEP (*(.preinit_array))
<     PROVIDE_HIDDEN (__preinit_array_end = .);
<   }
<   .init_array     :
<   {
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
<   {
<    *(.dynbss)
<    *(.bss .bss.* .gnu.linkonce.b.*)
---
>    ;
>    *(.bss)
159,181c39,40
<    /* Align here to ensure that the .bss section occupies space up to
<       _end.  Align after .bss to ensure correct alignment even if the
<       .bss section disappears because there are no input sections.
<       FIXME: Why do we need it? When there is no .bss section, we don't
<       pad the .data section.  */
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
---
>    ;
>    ;
183,225d41
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
<   /* Stabs debugging sections.  */
<   .stab          0 : { *(.stab) }
<   .stabstr       0 : { *(.stabstr) }
<   .stab.excl     0 : { *(.stab.excl) }
<   .stab.exclstr  0 : { *(.stab.exclstr) }
<   .stab.index    0 : { *(.stab.index) }
<   .stab.indexstr 0 : { *(.stab.indexstr) }
<   .comment       0 : { *(.comment) }
<   /* DWARF debug sections.
<      Symbols in the DWARF debugging sections are relative to the beginning
<      of the section so we begin them at 0.  */
<   /* DWARF 1 */
<   .debug          0 : { *(.debug) }
<   .line           0 : { *(.line) }
<   /* GNU DWARF 1 extensions */
<   .debug_srcinfo  0 : { *(.debug_srcinfo) }
<   .debug_sfnames  0 : { *(.debug_sfnames) }
<   /* DWARF 1.1 and DWARF 2 */
<   .debug_aranges  0 : { *(.debug_aranges) }
<   .debug_pubnames 0 : { *(.debug_pubnames) }
<   /* DWARF 2 */
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
<   .debug_abbrev   0 : { *(.debug_abbrev) }
<   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
<   .debug_frame    0 : { *(.debug_frame) }
<   .debug_str      0 : { *(.debug_str) }
<   .debug_loc      0 : { *(.debug_loc) }
<   .debug_macinfo  0 : { *(.debug_macinfo) }
<   /* SGI/MIPS DWARF 2 extensions */
<   .debug_weaknames 0 : { *(.debug_weaknames) }
<   .debug_funcnames 0 : { *(.debug_funcnames) }
<   .debug_typenames 0 : { *(.debug_typenames) }
<   .debug_varnames  0 : { *(.debug_varnames) }
<   /* DWARF 3 */
<   .debug_pubtypes 0 : { *(.debug_pubtypes) }
<   .debug_ranges   0 : { *(.debug_ranges) }
<   /* DWARF Extension.  */
<   .debug_macro    0 : { *(.debug_macro) }
<   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
outputfile
1,226c1,8879
< /* Default linker script, for normal executables */
< /* Copyright (C) 2014-2015 Free Software Foundation, Inc.
<    Copying and distribution of this script, with or without modification,
<    are permitted in any medium without royalty provided the copyright
<    notice and this notice are preserved.  */
< OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
< 	      "elf32-x86-64")
< OUTPUT_ARCH(i386:x64-32)
< ENTRY(_start)
< SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
< SECTIONS
< {
<   /* Read-only sections, merged into text segment: */
<   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
<   .interp         : { *(.interp) }
<   .note.gnu.build-id : { *(.note.gnu.build-id) }
<   .hash           : { *(.hash) }
<   .gnu.hash       : { *(.gnu.hash) }
<   .dynsym         : { *(.dynsym) }
<   .dynstr         : { *(.dynstr) }
<   .gnu.version    : { *(.gnu.version) }
<   .gnu.version_d  : { *(.gnu.version_d) }
<   .gnu.version_r  : { *(.gnu.version_r) }
<   .rela.init      : { *(.rela.init) }
<   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
<   .rela.fini      : { *(.rela.fini) }
<   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
<   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
<   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
<   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
<   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
<   .rela.ctors     : { *(.rela.ctors) }
<   .rela.dtors     : { *(.rela.dtors) }
<   .rela.got       : { *(.rela.got) }
<   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
<   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
<   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
<   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
<   .rela.ifunc     : { *(.rela.ifunc) }
<   .rela.plt       :
<     {
<       *(.rela.plt)
<       PROVIDE_HIDDEN (__rela_iplt_start = .);
<       *(.rela.iplt)
<       PROVIDE_HIDDEN (__rela_iplt_end = .);
<     }
<   .init           :
<   {
<     KEEP (*(SORT_NONE(.init)))
<   }
<   .plt            : { *(.plt) *(.iplt) }
<   .text           :
<   {
<     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
<     *(.text.exit .text.exit.*)
<     *(.text.startup .text.startup.*)
<     *(.text.hot .text.hot.*)
<     *(.text .stub .text.* .gnu.linkonce.t.*)
<     /* .gnu.warning sections are handled specially by elf32.em.  */
<     *(.gnu.warning)
<   }
<   .fini           :
<   {
<     KEEP (*(SORT_NONE(.fini)))
<   }
<   PROVIDE (__etext = .);
<   PROVIDE (_etext = .);
<   PROVIDE (etext = .);
<   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
<   .rodata1        : { *(.rodata1) }
<   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
<   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
<   .gcc_except_table.*) }
<   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
<   /* These sections are generated by the Sun/Oracle C++ compiler.  */
<   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
<   .exception_ranges*) }
<   /* Adjust the address for the data segment.  We want to adjust up to
<      the same address within the page on the next page up.  */
<   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
<   /* Exception handling  */
<   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
<   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
<   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
<   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
<   /* Thread Local Storage sections  */
<   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
<   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
<   .preinit_array     :
<   {
<     PROVIDE_HIDDEN (__preinit_array_start = .);
<     KEEP (*(.preinit_array))
<     PROVIDE_HIDDEN (__preinit_array_end = .);
<   }
<   .init_array     :
<   {
<     PROVIDE_HIDDEN (__init_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
<     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
<     PROVIDE_HIDDEN (__init_array_end = .);
<   }
<   .fini_array     :
<   {
<     PROVIDE_HIDDEN (__fini_array_start = .);
<     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
<     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
<     PROVIDE_HIDDEN (__fini_array_end = .);
<   }
<   .ctors          :
<   {
<     /* gcc uses crtbegin.o to find the start of
<        the constructors, so we make sure it is
<        first.  Because this is a wildcard, it
<        doesn't matter if the user does not
<        actually link against crtbegin.o; the
<        linker won't look for a file to match a
<        wildcard.  The wildcard also means that it
<        doesn't matter which directory crtbegin.o
<        is in.  */
<     KEEP (*crtbegin.o(.ctors))
<     KEEP (*crtbegin?.o(.ctors))
<     /* We don't want to include the .ctor section from
<        the crtend.o file until after the sorted ctors.
<        The .ctor section from the crtend file contains the
<        end of ctors marker and it must be last */
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
<     KEEP (*(SORT(.ctors.*)))
<     KEEP (*(.ctors))
<   }
<   .dtors          :
<   {
<     KEEP (*crtbegin.o(.dtors))
<     KEEP (*crtbegin?.o(.dtors))
<     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
<     KEEP (*(SORT(.dtors.*)))
<     KEEP (*(.dtors))
<   }
<   .jcr            : { KEEP (*(.jcr)) }
<   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
<   .dynamic        : { *(.dynamic) }
<   .got            : { *(.got) *(.igot) }
<   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
<   .got.plt        : { *(.got.plt)  *(.igot.plt) }
<   .data           :
<   {
<     *(.data .data.* .gnu.linkonce.d.*)
<     SORT(CONSTRUCTORS)
<   }
<   .data1          : { *(.data1) }
<   _edata = .; PROVIDE (edata = .);
<   . = .;
<   __bss_start = .;
<   .bss            :
<   {
<    *(.dynbss)
<    *(.bss .bss.* .gnu.linkonce.b.*)
<    *(COMMON)
<    /* Align here to ensure that the .bss section occupies space up to
<       _end.  Align after .bss to ensure correct alignment even if the
<       .bss section disappears because there are no input sections.
<       FIXME: Why do we need it? When there is no .bss section, we don't
<       pad the .data section.  */
<    . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   .lbss   :
<   {
<     *(.dynlbss)
<     *(.lbss .lbss.* .gnu.linkonce.lb.*)
<     *(LARGE_COMMON)
<   }
<   . = ALIGN(32 / 8);
<   . = SEGMENT_START("ldata-segment", .);
<   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
<   }
<   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
<   {
<     *(.ldata .ldata.* .gnu.linkonce.l.*)
<     . = ALIGN(. != 0 ? 32 / 8 : 1);
<   }
<   . = ALIGN(32 / 8);
<   _end = .; PROVIDE (end = .);
<   . = DATA_SEGMENT_END (.);
<   /* Stabs debugging sections.  */
<   .stab          0 : { *(.stab) }
<   .stabstr       0 : { *(.stabstr) }
<   .stab.excl     0 : { *(.stab.excl) }
<   .stab.exclstr  0 : { *(.stab.exclstr) }
<   .stab.index    0 : { *(.stab.index) }
<   .stab.indexstr 0 : { *(.stab.indexstr) }
<   .comment       0 : { *(.comment) }
<   /* DWARF debug sections.
<      Symbols in the DWARF debugging sections are relative to the beginning
<      of the section so we begin them at 0.  */
<   /* DWARF 1 */
<   .debug          0 : { *(.debug) }
<   .line           0 : { *(.line) }
<   /* GNU DWARF 1 extensions */
<   .debug_srcinfo  0 : { *(.debug_srcinfo) }
<   .debug_sfnames  0 : { *(.debug_sfnames) }
<   /* DWARF 1.1 and DWARF 2 */
<   .debug_aranges  0 : { *(.debug_aranges) }
<   .debug_pubnames 0 : { *(.debug_pubnames) }
<   /* DWARF 2 */
<   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
<   .debug_abbrev   0 : { *(.debug_abbrev) }
<   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
<   .debug_frame    0 : { *(.debug_frame) }
<   .debug_str      0 : { *(.debug_str) }
<   .debug_loc      0 : { *(.debug_loc) }
<   .debug_macinfo  0 : { *(.debug_macinfo) }
<   /* SGI/MIPS DWARF 2 extensions */
<   .debug_weaknames 0 : { *(.debug_weaknames) }
<   .debug_funcnames 0 : { *(.debug_funcnames) }
<   .debug_typenames 0 : { *(.debug_typenames) }
<   .debug_varnames  0 : { *(.debug_varnames) }
<   /* DWARF 3 */
<   .debug_pubtypes 0 : { *(.debug_pubtypes) }
<   .debug_ranges   0 : { *(.debug_ranges) }
<   /* DWARF Extension.  */
<   .debug_macro    0 : { *(.debug_macro) }
<   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
<   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
< }
---
> elf32_x86_64.x
> elf32_x86_64.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 81c81
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> ---
> >   . = .;
> 143d142
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> 185d183
> <   . = DATA_SEGMENT_END (.);
> elf32_x86_64.xc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc: combine and sort reloc sections */
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> elf32_x86_64.xd
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -pie: link position independent executable */
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> elf32_x86_64.xdc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> elf32_x86_64.xdw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 142,144c144,145
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> elf32_x86_64.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> elf32_x86_64.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 9,10c9,12
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,50
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> >   .text         0 :
> 54,58c52
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c56
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c60,64
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c66
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c68
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d71
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c73,76
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c78,80
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d81
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d82
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c84,88
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,154c90,93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >     *(.data)
> >   }
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c96
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d102
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c104
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c107
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c110
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c112
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c114
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c116
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d117
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c139
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d156
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf32_x86_64.xs
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld --shared: link shared library */
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 43d41
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d42
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d88
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d89
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d92
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d94
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d97
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d99
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> elf32_x86_64.xsc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc: shared library, combine & sort relocs */
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> elf32_x86_64.xsw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 142,144c135,136
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> elf32_x86_64.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 9,10c9,12
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,50
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> >   .text         0 :
> 54,58c52
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c56
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c60,64
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c66
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c68
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d71
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c73,76
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c78,80
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d81
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d82
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c84,88
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,147c90
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> ---
> >     *(.data)
> 150,154c93,94
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c97
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d103
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c105
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c108
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c111
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c113
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c115
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c117
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d118
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c140
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d157
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf32_x86_64.xw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 142,144c144,145
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> elf_i386.x
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 143c141
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d163
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d165
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 81c79
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> ---
> >   . = .;
> 143d140
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> 166,171d162
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d164
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> 185d166
> <   . = DATA_SEGMENT_END (.);
> elf_i386.xc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 143c144
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d166
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d168
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xd
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -pie: link position independent executable */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 143c141
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d163
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d165
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xdc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 143c144
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d166
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d168
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xdw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 142,144c143,144
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 166,171d165
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d167
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 143c141
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d163
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d165
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,38
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rel.init     0 : { *(.rel.init) }
> >   .rel.text     0 : { *(.rel.text) }
> >   .rel.fini     0 : { *(.rel.fini) }
> >   .rel.rodata   0 : { *(.rel.rodata) }
> >   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
> >   .rel.data     0 : { *(.rel.data) }
> >   .rel.tdata	0 : { *(.rel.tdata) }
> >   .rel.tbss	0 : { *(.rel.tbss) }
> >   .rel.ctors    0 : { *(.rel.ctors) }
> >   .rel.dtors    0 : { *(.rel.dtors) }
> >   .rel.got      0 : { *(.rel.got) }
> >   .rel.bss      0 : { *(.rel.bss) }
> >   .rel.ifunc    0 : { *(.rel.ifunc) }
> >   .rel.plt      0 :
> 42,45c40
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> 47c42
> <   .init           :
> ---
> >   .init         0 :
> 51,52c46,48
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> > .plt.got      0 : { *(.plt.got) }
> >   .text         0 :
> 54,58c50
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c54
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c58,62
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c64
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c66
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d69
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c71,74
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c76,78
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d79
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d80
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c82,86
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,154c88,91
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >     *(.data)
> >   }
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c94
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164,181d100
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> 183,185d101
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c123
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d140
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_i386.xs
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld --shared: link shared library */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c23,36
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c38,39
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       *(.rel.iplt)
> 51a46
> > .plt.got        : { *(.plt.got) }
> 92d86
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d87
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d90
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d92
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d95
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d97
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 143c132
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d154
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d156
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xsc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c23
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c25,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       *(.rel.iplt)
> 51a49
> > .plt.got        : { *(.plt.got) }
> 92d89
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d90
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d95
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d98
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d100
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 143c135
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d157
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d159
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xsw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c23
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c25,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       *(.rel.iplt)
> 51a49
> > .plt.got        : { *(.plt.got) }
> 92d89
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d90
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d95
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d98
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d100
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 142,144c134,135
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 166,171d156
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d158
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_i386.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,38
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rel.init     0 : { *(.rel.init) }
> >   .rel.text     0 : { *(.rel.text) }
> >   .rel.fini     0 : { *(.rel.fini) }
> >   .rel.rodata   0 : { *(.rel.rodata) }
> >   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
> >   .rel.data     0 : { *(.rel.data) }
> >   .rel.tdata	0 : { *(.rel.tdata) }
> >   .rel.tbss	0 : { *(.rel.tbss) }
> >   .rel.ctors    0 : { *(.rel.ctors) }
> >   .rel.dtors    0 : { *(.rel.dtors) }
> >   .rel.got      0 : { *(.rel.got) }
> >   .rel.bss      0 : { *(.rel.bss) }
> >   .rel.ifunc    0 : { *(.rel.ifunc) }
> >   .rel.plt      0 :
> 42,45c40
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> 47c42
> <   .init           :
> ---
> >   .init         0 :
> 51,52c46,48
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> > .plt.got      0 : { *(.plt.got) }
> >   .text         0 :
> 54,58c50
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c54
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c58,62
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c64
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c66
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d69
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c71,74
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c76,78
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d79
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d80
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c82,86
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,147c88
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> ---
> >     *(.data)
> 150,154c91,92
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c95
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164,181d101
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> 183,185d102
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c124
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d141
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_i386.xw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-i386", "elf32-i386",
> > 	      "elf32-i386")
> > OUTPUT_ARCH(i386)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/i386-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i386-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 142,144c143,144
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 166,171d165
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d167
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.x
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 143c141
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d163
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d165
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 81c79
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> ---
> >   . = .;
> 143d140
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> 166,171d162
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d164
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> 185d166
> <   . = DATA_SEGMENT_END (.);
> elf_iamcu.xc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 143c144
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d166
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d168
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xd
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -pie: link position independent executable */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 143c141
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d163
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d165
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xdc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 143c144
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d166
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d168
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xdw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 142,144c143,144
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 166,171d165
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d167
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24,37
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c39,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a49
> > .plt.got        : { *(.plt.got) }
> 143c141
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d163
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d165
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,38
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rel.init     0 : { *(.rel.init) }
> >   .rel.text     0 : { *(.rel.text) }
> >   .rel.fini     0 : { *(.rel.fini) }
> >   .rel.rodata   0 : { *(.rel.rodata) }
> >   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
> >   .rel.data     0 : { *(.rel.data) }
> >   .rel.tdata	0 : { *(.rel.tdata) }
> >   .rel.tbss	0 : { *(.rel.tbss) }
> >   .rel.ctors    0 : { *(.rel.ctors) }
> >   .rel.dtors    0 : { *(.rel.dtors) }
> >   .rel.got      0 : { *(.rel.got) }
> >   .rel.bss      0 : { *(.rel.bss) }
> >   .rel.ifunc    0 : { *(.rel.ifunc) }
> >   .rel.plt      0 :
> 42,45c40
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> 47c42
> <   .init           :
> ---
> >   .init         0 :
> 51,52c46,48
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> > .plt.got      0 : { *(.plt.got) }
> >   .text         0 :
> 54,58c50
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c54
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c58,62
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c64
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c66
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d69
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c71,74
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c76,78
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d79
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d80
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c82,86
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,154c88,91
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >     *(.data)
> >   }
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c94
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164,181d100
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> 183,185d101
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c123
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d140
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_iamcu.xs
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld --shared: link shared library */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c23,36
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.init       : { *(.rel.init) }
> >   .rel.text       : { *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*) }
> >   .rel.fini       : { *(.rel.fini) }
> >   .rel.rodata     : { *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*) }
> >   .rel.data.rel.ro   : { *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*) }
> >   .rel.data       : { *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*) }
> >   .rel.tdata	  : { *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*) }
> >   .rel.tbss	  : { *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*) }
> >   .rel.ctors      : { *(.rel.ctors) }
> >   .rel.dtors      : { *(.rel.dtors) }
> >   .rel.got        : { *(.rel.got) }
> >   .rel.bss        : { *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*) }
> >   .rel.ifunc      : { *(.rel.ifunc) }
> >   .rel.plt        :
> 42,45c38,39
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> >       *(.rel.iplt)
> 51a46
> > .plt.got        : { *(.plt.got) }
> 92d86
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d87
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d90
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d92
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d95
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d97
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 143c132
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d154
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d156
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xsc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c23
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c25,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       *(.rel.iplt)
> 51a49
> > .plt.got        : { *(.plt.got) }
> 92d89
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d90
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d95
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d98
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d100
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 143c135
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> ---
> >   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 12 ? 12 : 0, .);
> 166,171d157
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d159
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xsw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,40c23
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c25,42
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       *(.rel.iplt)
> 51a49
> > .plt.got        : { *(.plt.got) }
> 92d89
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d90
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d95
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d98
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d100
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 142,144c134,135
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 166,171d156
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d158
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_iamcu.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,38
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rel.init     0 : { *(.rel.init) }
> >   .rel.text     0 : { *(.rel.text) }
> >   .rel.fini     0 : { *(.rel.fini) }
> >   .rel.rodata   0 : { *(.rel.rodata) }
> >   .rel.data.rel.ro 0 : { *(.rel.data.rel.ro) }
> >   .rel.data     0 : { *(.rel.data) }
> >   .rel.tdata	0 : { *(.rel.tdata) }
> >   .rel.tbss	0 : { *(.rel.tbss) }
> >   .rel.ctors    0 : { *(.rel.ctors) }
> >   .rel.dtors    0 : { *(.rel.dtors) }
> >   .rel.got      0 : { *(.rel.got) }
> >   .rel.bss      0 : { *(.rel.bss) }
> >   .rel.ifunc    0 : { *(.rel.ifunc) }
> >   .rel.plt      0 :
> 42,45c40
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.plt)
> 47c42
> <   .init           :
> ---
> >   .init         0 :
> 51,52c46,48
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> > .plt.got      0 : { *(.plt.got) }
> >   .text         0 :
> 54,58c50
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c54
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c58,62
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c64
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c66
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d69
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c71,74
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c76,78
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d79
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d80
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c82,86
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,147c88
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> ---
> >     *(.data)
> 150,154c91,92
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c95
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164,181d101
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> 183,185d102
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c124
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d141
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_iamcu.xw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf32-iamcu", "elf32-iamcu",
> > 	      "elf32-iamcu")
> > OUTPUT_ARCH(iamcu)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x08048000)); . = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;
> 24,40c24
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .rel.dyn        :
> 42,45c26,45
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> ---
> >       *(.rel.init)
> >       *(.rel.text .rel.text.* .rel.gnu.linkonce.t.*)
> >       *(.rel.fini)
> >       *(.rel.rodata .rel.rodata.* .rel.gnu.linkonce.r.*)
> >       *(.rel.data.rel.ro .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*)
> >       *(.rel.data .rel.data.* .rel.gnu.linkonce.d.*)
> >       *(.rel.tdata .rel.tdata.* .rel.gnu.linkonce.td.*)
> >       *(.rel.tbss .rel.tbss.* .rel.gnu.linkonce.tb.*)
> >       *(.rel.ctors)
> >       *(.rel.dtors)
> >       *(.rel.got)
> >       *(.rel.bss .rel.bss.* .rel.gnu.linkonce.b.*)
> >       *(.rel.ifunc)
> >     }
> >   .rel.plt        :
> >     {
> >       *(.rel.plt)
> >       PROVIDE_HIDDEN (__rel_iplt_start = .);
> >       *(.rel.iplt)
> >       PROVIDE_HIDDEN (__rel_iplt_end = .);
> 51a52
> > .plt.got        : { *(.plt.got) }
> 142,144c143,144
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 166,171d165
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> 174,182d167
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> elf_k1om.x
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 164c164
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c172
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c181
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c183
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 81c81
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> ---
> >   . = .;
> 143d142
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> 164c163
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c171
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c180
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c182
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 185d183
> <   . = DATA_SEGMENT_END (.);
> elf_k1om.xc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xd
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -pie: link position independent executable */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 164c164
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c172
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c181
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c183
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xdc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xdw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 142,144c144,145
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c165
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c173
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c182
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c184
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 164c164
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c172
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c181
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c183
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,50
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> >   .text         0 :
> 54,58c52
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c56
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c60,64
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c66
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c68
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d71
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c73,76
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c78,80
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d81
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d82
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c84,88
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,154c90,93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >     *(.data)
> >   }
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c96
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d102
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c104
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c107
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c110
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c112
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c114
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c116
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d117
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c139
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d156
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_k1om.xs
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld --shared: link shared library */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 43d41
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d42
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d88
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d89
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d92
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d94
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d97
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d99
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 164c155
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c163
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c172
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xsc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 164c157
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c165
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c174
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c176
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xsw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 142,144c135,136
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c156
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c164
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c173
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c175
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_k1om.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,50
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> >   .text         0 :
> 54,58c52
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c56
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c60,64
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c66
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c68
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d71
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c73,76
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c78,80
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d81
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d82
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c84,88
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,147c90
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> ---
> >     *(.data)
> 150,154c93,94
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c97
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d103
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c105
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c108
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c111
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c113
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c115
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c117
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d118
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c140
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d157
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_k1om.xw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-k1om", "elf64-k1om",
> > 	      "elf64-k1om")
> > OUTPUT_ARCH(k1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 142,144c144,145
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c165
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c173
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c182
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c184
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.x
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 164c164
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c172
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c181
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c183
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 81c81
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> ---
> >   . = .;
> 143d142
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> 164c163
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c171
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c180
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c182
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 185d183
> <   . = DATA_SEGMENT_END (.);
> elf_l1om.xc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xd
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -pie: link position independent executable */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 164c164
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c172
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c181
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c183
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xdc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xdw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 142,144c144,145
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c165
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c173
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c182
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c184
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 164c164
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c172
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c181
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c183
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,50
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> >   .text         0 :
> 54,58c52
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c56
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c60,64
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c66
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c68
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d71
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c73,76
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c78,80
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d81
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d82
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c84,88
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,154c90,93
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >     *(.data)
> >   }
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c96
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d102
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c104
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c107
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c110
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c112
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c114
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c116
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d117
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c139
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d156
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_l1om.xs
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld --shared: link shared library */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 43d41
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d42
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d88
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d89
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d92
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d94
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d97
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d99
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 164c155
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c163
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c172
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xsc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 164c157
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c165
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c174
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c176
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xsw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 142,144c135,136
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c156
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c164
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c173
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c175
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_l1om.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,50
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> >   .text         0 :
> 54,58c52
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c56
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c60,64
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c66
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c68
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d71
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c73,76
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c78,80
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d81
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d82
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c84,88
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,147c90
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> ---
> >     *(.data)
> 150,154c93,94
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c97
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d103
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c105
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c108
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c111
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c113
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c115
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c117
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d118
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c140
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d157
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_l1om.xw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-l1om", "elf64-l1om",
> > 	      "elf64-l1om")
> > OUTPUT_ARCH(l1om)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 142,144c144,145
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c165
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c173
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c182
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c184
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.x
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 51a52,53
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 51a52,53
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 81c83
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> ---
> >   . = .;
> 143d144
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> 164c165
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c173
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c182
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c184
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 185d185
> <   . = DATA_SEGMENT_END (.);
> elf_x86_64.xc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 51a54,55
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 164c168
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c176
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c185
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c187
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xd
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -pie: link position independent executable */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 51a52,53
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xdc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 51a54,55
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 164c168
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c176
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c185
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c187
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xdw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -pie -z combreloc -z now -z relro: position independent executable, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> ---
> >   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0)); . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 51a54,55
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 142,144c146,147
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c167
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c175
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c184
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c186
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 51a52,53
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 164c166
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c174
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c183
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c185
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,52
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> > .plt.got      0 : { *(.plt.got) }
> > .plt.bnd      0 : { *(.plt.bnd) }
> >   .text         0 :
> 54,58c54
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c58
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c62,66
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c68
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c70
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d73
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c75,78
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c80,82
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d83
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d84
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c86,90
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,154c92,95
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >     *(.data)
> >   }
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c98
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d104
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c106
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c109
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c112
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c114
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c116
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c118
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d119
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c141
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d158
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_x86_64.xs
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld --shared: link shared library */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 43d41
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d42
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 51a49,50
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 92d90
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d91
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d94
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d96
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d99
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d101
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 164c157
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c165
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c174
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c176
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xsc
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 51a51,52
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 92d92
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d93
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d96
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d98
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d101
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d103
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 164c159
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c167
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c176
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c178
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xsw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for --shared -z combreloc -z now -z relro: shared library, combine & sort relocs */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 14,15c14
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   . = SEGMENT_START("text-segment", 0) + SIZEOF_HEADERS;
> 24,39c23,40
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 43d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> 45d44
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 51a51,52
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 92d92
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d93
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 98d96
> <     PROVIDE_HIDDEN (__init_array_start = .);
> 101d98
> <     PROVIDE_HIDDEN (__init_array_end = .);
> 105d101
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> 108d103
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> 142,144c137,138
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c158
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c166
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c175
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c177
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> elf_x86_64.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 6,10c6,12
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> >  /* For some reason, the Solaris linker makes bad executables
> >   if gld -r is used and the intermediate file has sections starting
> >   at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
> >   bug.  But for now assigning the zero vmas works.  */
> 14,15c16
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> ---
> >   .interp       0 : { *(.interp) }
> 17,40c18,41
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> ---
> >   .hash         0 : { *(.hash) }
> >   .gnu.hash     0 : { *(.gnu.hash) }
> >   .dynsym       0 : { *(.dynsym) }
> >   .dynstr       0 : { *(.dynstr) }
> >   .gnu.version  0 : { *(.gnu.version) }
> >   .gnu.version_d 0: { *(.gnu.version_d) }
> >   .gnu.version_r 0: { *(.gnu.version_r) }
> >   .rela.init    0 : { *(.rela.init) }
> >   .rela.text    0 : { *(.rela.text) }
> >   .rela.fini    0 : { *(.rela.fini) }
> >   .rela.rodata  0 : { *(.rela.rodata) }
> >   .rela.data.rel.ro 0 : { *(.rela.data.rel.ro) }
> >   .rela.data    0 : { *(.rela.data) }
> >   .rela.tdata	0 : { *(.rela.tdata) }
> >   .rela.tbss	0 : { *(.rela.tbss) }
> >   .rela.ctors   0 : { *(.rela.ctors) }
> >   .rela.dtors   0 : { *(.rela.dtors) }
> >   .rela.got     0 : { *(.rela.got) }
> >   .rela.bss     0 : { *(.rela.bss) }
> >   .rela.ldata   0 : { *(.rela.ldata) }
> >   .rela.lbss    0 : { *(.rela.lbss) }
> >   .rela.lrodata 0 : { *(.rela.lrodata) }
> >   .rela.ifunc   0 : { *(.rela.ifunc) }
> >   .rela.plt     0 :
> 43,45d43
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> 47c45
> <   .init           :
> ---
> >   .init         0 :
> 51,52c49,52
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .plt          0 : { *(.plt) *(.iplt) }
> > .plt.got      0 : { *(.plt.got) }
> > .plt.bnd      0 : { *(.plt.bnd) }
> >   .text         0 :
> 54,58c54
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> ---
> >     *(.text .stub)
> 62c58
> <   .fini           :
> ---
> >   .fini         0 :
> 66,73c62,66
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> ---
> >   .rodata       0 : { *(.rodata) }
> >   .rodata1      0 : { *(.rodata1) }
> >   .eh_frame_hdr : { *(.eh_frame_hdr)  }
> >   .eh_frame     0 : ONLY_IF_RO { KEEP (*(.eh_frame))  }
> >   .gcc_except_table 0 : ONLY_IF_RO { *(.gcc_except_table
> 75c68
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> ---
> >   .gnu_extab 0 : ONLY_IF_RO { *(.gnu_extab*) }
> 77c70
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> ---
> >   .exception_ranges 0 : ONLY_IF_RO { *(.exception_ranges
> 81d73
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> 83,86c75,78
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> ---
> >   .eh_frame     0 : ONLY_IF_RW { KEEP (*(.eh_frame))  }
> >   .gnu_extab    0 : ONLY_IF_RW { *(.gnu_extab) }
> >   .gcc_except_table 0 : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> >   .exception_ranges 0 : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> 88,90c80,82
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> ---
> >   .tdata	0 : { *(.tdata) }
> >   .tbss		0 : { *(.tbss) }
> >   .preinit_array   0 :
> 92d83
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> 94d84
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> 96c86,90
> <   .init_array     :
> ---
> >   .jcr          0 : { KEEP (*(.jcr)) }
> >   .dynamic      0 : { *(.dynamic) }
> >   .got          0 : { *(.got) *(.igot) }
> >   .got.plt      0 : { *(.got.plt)  *(.igot.plt) }
> >   .data         0 :
> 98,147c92
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> ---
> >     *(.data)
> 150,154c95,96
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data1        0 : { *(.data1) }
> >   .bss          0 :
> 157c99
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    *(.bss)
> 164d105
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> 166c107
> <   .lbss   :
> ---
> >   .lbss 0 :
> 169c110
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> ---
> >     *(.lbss)
> 172,174c113
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .lrodata 0  :
> 176c115
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> ---
> >     *(.lrodata)
> 178c117
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> ---
> >   .ldata 0  :
> 180,181c119
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     *(.ldata)
> 183,185d120
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> 207c142
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> ---
> >   .debug_info     0 : { *(.debug_info) }
> 225d159
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> elf_x86_64.xw
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -z combreloc -z now -z relro: combine and sort reloc sections */
> 6,8c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> ---
> > OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
> > 	      "elf64-x86-64")
> > OUTPUT_ARCH(i386:x86-64)
> 10c10
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64"); SEARCH_DIR("/usr/local/lib64"); SEARCH_DIR("/lib64"); SEARCH_DIR("/usr/lib64"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> 24,39c24,41
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> ---
> >   .rela.dyn       :
> >     {
> >       *(.rela.init)
> >       *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
> >       *(.rela.fini)
> >       *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
> >       *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
> >       *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
> >       *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
> >       *(.rela.ctors)
> >       *(.rela.dtors)
> >       *(.rela.got)
> >       *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
> >       *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
> >       *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
> >       *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
> >       *(.rela.ifunc)
> >     }
> 51a54,55
> > .plt.got        : { *(.plt.got) }
> > .plt.bnd        : { *(.plt.bnd) }
> 142,144c146,147
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> ---
> >   .got            : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }
> >   . = DATA_SEGMENT_RELRO_END (0, .);
> 164c167
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(. != 0 ? 64 / 8 : 1);
> 172c175
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> 181c184
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     . = ALIGN(. != 0 ? 64 / 8 : 1);
> 183c186
> <   . = ALIGN(32 / 8);
> ---
> >   . = ALIGN(64 / 8);
> i386linux.x
> 6,10c6,10
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> > 	      "a.out-i386-linux")
> > OUTPUT_ARCH(i386)
> > SEARCH_DIR("/usr/i386-pc-linux-gnuaout/lib");
> > PROVIDE (__stack = 0);
> 13,47c13,14
> <   /* Read-only sections, merged into text segment: */
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> <   .note.gnu.build-id : { *(.note.gnu.build-id) }
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> <     {
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> <     }
> <   .init           :
> ---
> >   . = 0x1020;
> >   .text :
> 49c16,40
> <     KEEP (*(SORT_NONE(.init)))
> ---
> >     CREATE_OBJECT_SYMBOLS
> >     *(.text)
> >     /* The next six sections are for SunOS dynamic linking.  The order
> >        is important.  */
> >     *(.dynrel)
> >     *(.hash)
> >     *(.dynsym)
> >     *(.dynstr)
> >     *(.rules)
> >     *(.need)
> >     _etext = .;
> >     __etext = .;
> >   }
> >   . = ALIGN(0x1000);
> >   .data :
> >   {
> >     /* The first three sections are for SunOS dynamic linking.  */
> >     *(.dynamic)
> >     *(.got)
> >     *(.plt)
> >     *(.data)
> >     *(.linux-dynamic) /* For Linux dynamic linking.  */
> >     CONSTRUCTORS
> >     _edata  =  .;
> >     __edata  =  .;
> 51,52c42
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .bss :
> 54,157c44,45
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> <     /* .gnu.warning sections are handled specially by elf32.em.  */
> <     *(.gnu.warning)
> <   }
> <   .fini           :
> <   {
> <     KEEP (*(SORT_NONE(.fini)))
> <   }
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> <   .gcc_except_table.*) }
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> <   /* These sections are generated by the Sun/Oracle C++ compiler.  */
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> <   .exception_ranges*) }
> <   /* Adjust the address for the data segment.  We want to adjust up to
> <      the same address within the page on the next page up.  */
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> <   /* Exception handling  */
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> <   /* Thread Local Storage sections  */
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> <   {
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> <     KEEP (*(.preinit_array))
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> <   }
> <   .init_array     :
> <   {
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> <   {
> <    *(.dynbss)
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >     __bss_start = .;
> >    *(.bss)
> 159,181c47,49
> <    /* Align here to ensure that the .bss section occupies space up to
> <       _end.  Align after .bss to ensure correct alignment even if the
> <       .bss section disappears because there are no input sections.
> <       FIXME: Why do we need it? When there is no .bss section, we don't
> <       pad the .data section.  */
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(4);
> >    _end = . ;
> >    __end = . ;
> 183,225d50
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> <   /* Stabs debugging sections.  */
> <   .stab          0 : { *(.stab) }
> <   .stabstr       0 : { *(.stabstr) }
> <   .stab.excl     0 : { *(.stab.excl) }
> <   .stab.exclstr  0 : { *(.stab.exclstr) }
> <   .stab.index    0 : { *(.stab.index) }
> <   .stab.indexstr 0 : { *(.stab.indexstr) }
> <   .comment       0 : { *(.comment) }
> <   /* DWARF debug sections.
> <      Symbols in the DWARF debugging sections are relative to the beginning
> <      of the section so we begin them at 0.  */
> <   /* DWARF 1 */
> <   .debug          0 : { *(.debug) }
> <   .line           0 : { *(.line) }
> <   /* GNU DWARF 1 extensions */
> <   .debug_srcinfo  0 : { *(.debug_srcinfo) }
> <   .debug_sfnames  0 : { *(.debug_sfnames) }
> <   /* DWARF 1.1 and DWARF 2 */
> <   .debug_aranges  0 : { *(.debug_aranges) }
> <   .debug_pubnames 0 : { *(.debug_pubnames) }
> <   /* DWARF 2 */
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> <   .debug_abbrev   0 : { *(.debug_abbrev) }
> <   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
> <   .debug_frame    0 : { *(.debug_frame) }
> <   .debug_str      0 : { *(.debug_str) }
> <   .debug_loc      0 : { *(.debug_loc) }
> <   .debug_macinfo  0 : { *(.debug_macinfo) }
> <   /* SGI/MIPS DWARF 2 extensions */
> <   .debug_weaknames 0 : { *(.debug_weaknames) }
> <   .debug_funcnames 0 : { *(.debug_funcnames) }
> <   .debug_typenames 0 : { *(.debug_typenames) }
> <   .debug_varnames  0 : { *(.debug_varnames) }
> <   /* DWARF 3 */
> <   .debug_pubtypes 0 : { *(.debug_pubtypes) }
> <   .debug_ranges   0 : { *(.debug_ranges) }
> <   /* DWARF Extension.  */
> <   .debug_macro    0 : { *(.debug_macro) }
> <   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> i386linux.xbn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -N: mix text and data on same page; don't align data */
> 6,10c6,10
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> > 	      "a.out-i386-linux")
> > OUTPUT_ARCH(i386)
> > SEARCH_DIR("/usr/i386-pc-linux-gnuaout/lib");
> > PROVIDE (__stack = 0);
> 13,47c13,14
> <   /* Read-only sections, merged into text segment: */
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> <   .note.gnu.build-id : { *(.note.gnu.build-id) }
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> <     {
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> <     }
> <   .init           :
> ---
> >   . = 0;
> >   .text :
> 49c16,27
> <     KEEP (*(SORT_NONE(.init)))
> ---
> >     CREATE_OBJECT_SYMBOLS
> >     *(.text)
> >     /* The next six sections are for SunOS dynamic linking.  The order
> >        is important.  */
> >     *(.dynrel)
> >     *(.hash)
> >     *(.dynsym)
> >     *(.dynstr)
> >     *(.rules)
> >     *(.need)
> >     _etext = .;
> >     __etext = .;
> 51,151d28
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> <   {
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> <     /* .gnu.warning sections are handled specially by elf32.em.  */
> <     *(.gnu.warning)
> <   }
> <   .fini           :
> <   {
> <     KEEP (*(SORT_NONE(.fini)))
> <   }
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> <   .gcc_except_table.*) }
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> <   /* These sections are generated by the Sun/Oracle C++ compiler.  */
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> <   .exception_ranges*) }
> <   /* Adjust the address for the data segment.  We want to adjust up to
> <      the same address within the page on the next page up.  */
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> <   /* Exception handling  */
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> <   /* Thread Local Storage sections  */
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> <   {
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> <     KEEP (*(.preinit_array))
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> <   }
> <   .init_array     :
> <   {
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> 153,154c30
> <   __bss_start = .;
> <   .bss            :
> ---
> >   .data :
> 156,164c32,40
> <    *(.dynbss)
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> <    *(COMMON)
> <    /* Align here to ensure that the .bss section occupies space up to
> <       _end.  Align after .bss to ensure correct alignment even if the
> <       .bss section disappears because there are no input sections.
> <       FIXME: Why do we need it? When there is no .bss section, we don't
> <       pad the .data section.  */
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     /* The first three sections are for SunOS dynamic linking.  */
> >     *(.dynamic)
> >     *(.got)
> >     *(.plt)
> >     *(.data)
> >     *(.linux-dynamic) /* For Linux dynamic linking.  */
> >     CONSTRUCTORS
> >     _edata  =  .;
> >     __edata  =  .;
> 166c42
> <   .lbss   :
> ---
> >   .bss :
> 168,181c44,49
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >     __bss_start = .;
> >    *(.bss)
> >    *(COMMON)
> >    . = ALIGN(4);
> >    _end = . ;
> >    __end = . ;
> 183,225d50
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> <   /* Stabs debugging sections.  */
> <   .stab          0 : { *(.stab) }
> <   .stabstr       0 : { *(.stabstr) }
> <   .stab.excl     0 : { *(.stab.excl) }
> <   .stab.exclstr  0 : { *(.stab.exclstr) }
> <   .stab.index    0 : { *(.stab.index) }
> <   .stab.indexstr 0 : { *(.stab.indexstr) }
> <   .comment       0 : { *(.comment) }
> <   /* DWARF debug sections.
> <      Symbols in the DWARF debugging sections are relative to the beginning
> <      of the section so we begin them at 0.  */
> <   /* DWARF 1 */
> <   .debug          0 : { *(.debug) }
> <   .line           0 : { *(.line) }
> <   /* GNU DWARF 1 extensions */
> <   .debug_srcinfo  0 : { *(.debug_srcinfo) }
> <   .debug_sfnames  0 : { *(.debug_sfnames) }
> <   /* DWARF 1.1 and DWARF 2 */
> <   .debug_aranges  0 : { *(.debug_aranges) }
> <   .debug_pubnames 0 : { *(.debug_pubnames) }
> <   /* DWARF 2 */
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> <   .debug_abbrev   0 : { *(.debug_abbrev) }
> <   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
> <   .debug_frame    0 : { *(.debug_frame) }
> <   .debug_str      0 : { *(.debug_str) }
> <   .debug_loc      0 : { *(.debug_loc) }
> <   .debug_macinfo  0 : { *(.debug_macinfo) }
> <   /* SGI/MIPS DWARF 2 extensions */
> <   .debug_weaknames 0 : { *(.debug_weaknames) }
> <   .debug_funcnames 0 : { *(.debug_funcnames) }
> <   .debug_typenames 0 : { *(.debug_typenames) }
> <   .debug_varnames  0 : { *(.debug_varnames) }
> <   /* DWARF 3 */
> <   .debug_pubtypes 0 : { *(.debug_pubtypes) }
> <   .debug_ranges   0 : { *(.debug_ranges) }
> <   /* DWARF Extension.  */
> <   .debug_macro    0 : { *(.debug_macro) }
> <   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> i386linux.xn
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for -n: mix text and data on same page */
> 6,10c6,10
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> > 	      "a.out-i386-linux")
> > OUTPUT_ARCH(i386)
> > SEARCH_DIR("/usr/i386-pc-linux-gnuaout/lib");
> > PROVIDE (__stack = 0);
> 13,47c13,14
> <   /* Read-only sections, merged into text segment: */
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> <   .note.gnu.build-id : { *(.note.gnu.build-id) }
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> <     {
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> <     }
> <   .init           :
> ---
> >   . = 0;
> >   .text :
> 49c16,40
> <     KEEP (*(SORT_NONE(.init)))
> ---
> >     CREATE_OBJECT_SYMBOLS
> >     *(.text)
> >     /* The next six sections are for SunOS dynamic linking.  The order
> >        is important.  */
> >     *(.dynrel)
> >     *(.hash)
> >     *(.dynsym)
> >     *(.dynstr)
> >     *(.rules)
> >     *(.need)
> >     _etext = .;
> >     __etext = .;
> >   }
> >   . = ALIGN(0x1000);
> >   .data :
> >   {
> >     /* The first three sections are for SunOS dynamic linking.  */
> >     *(.dynamic)
> >     *(.got)
> >     *(.plt)
> >     *(.data)
> >     *(.linux-dynamic) /* For Linux dynamic linking.  */
> >     CONSTRUCTORS
> >     _edata  =  .;
> >     __edata  =  .;
> 51,52c42
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .bss :
> 54,157c44,45
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> <     /* .gnu.warning sections are handled specially by elf32.em.  */
> <     *(.gnu.warning)
> <   }
> <   .fini           :
> <   {
> <     KEEP (*(SORT_NONE(.fini)))
> <   }
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> <   .gcc_except_table.*) }
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> <   /* These sections are generated by the Sun/Oracle C++ compiler.  */
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> <   .exception_ranges*) }
> <   /* Adjust the address for the data segment.  We want to adjust up to
> <      the same address within the page on the next page up.  */
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> <   /* Exception handling  */
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> <   /* Thread Local Storage sections  */
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> <   {
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> <     KEEP (*(.preinit_array))
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> <   }
> <   .init_array     :
> <   {
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> <   {
> <    *(.dynbss)
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >     __bss_start = .;
> >    *(.bss)
> 159,181c47,49
> <    /* Align here to ensure that the .bss section occupies space up to
> <       _end.  Align after .bss to ensure correct alignment even if the
> <       .bss section disappears because there are no input sections.
> <       FIXME: Why do we need it? When there is no .bss section, we don't
> <       pad the .data section.  */
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    . = ALIGN(4);
> >    _end = . ;
> >    __end = . ;
> 183,225d50
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> <   /* Stabs debugging sections.  */
> <   .stab          0 : { *(.stab) }
> <   .stabstr       0 : { *(.stabstr) }
> <   .stab.excl     0 : { *(.stab.excl) }
> <   .stab.exclstr  0 : { *(.stab.exclstr) }
> <   .stab.index    0 : { *(.stab.index) }
> <   .stab.indexstr 0 : { *(.stab.indexstr) }
> <   .comment       0 : { *(.comment) }
> <   /* DWARF debug sections.
> <      Symbols in the DWARF debugging sections are relative to the beginning
> <      of the section so we begin them at 0.  */
> <   /* DWARF 1 */
> <   .debug          0 : { *(.debug) }
> <   .line           0 : { *(.line) }
> <   /* GNU DWARF 1 extensions */
> <   .debug_srcinfo  0 : { *(.debug_srcinfo) }
> <   .debug_sfnames  0 : { *(.debug_sfnames) }
> <   /* DWARF 1.1 and DWARF 2 */
> <   .debug_aranges  0 : { *(.debug_aranges) }
> <   .debug_pubnames 0 : { *(.debug_pubnames) }
> <   /* DWARF 2 */
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> <   .debug_abbrev   0 : { *(.debug_abbrev) }
> <   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
> <   .debug_frame    0 : { *(.debug_frame) }
> <   .debug_str      0 : { *(.debug_str) }
> <   .debug_loc      0 : { *(.debug_loc) }
> <   .debug_macinfo  0 : { *(.debug_macinfo) }
> <   /* SGI/MIPS DWARF 2 extensions */
> <   .debug_weaknames 0 : { *(.debug_weaknames) }
> <   .debug_funcnames 0 : { *(.debug_funcnames) }
> <   .debug_typenames 0 : { *(.debug_typenames) }
> <   .debug_varnames  0 : { *(.debug_varnames) }
> <   /* DWARF 3 */
> <   .debug_pubtypes 0 : { *(.debug_pubtypes) }
> <   .debug_ranges   0 : { *(.debug_ranges) }
> <   /* DWARF Extension.  */
> <   .debug_macro    0 : { *(.debug_macro) }
> <   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> i386linux.xr
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -r: link without relocation */
> 6,10c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> > 	      "a.out-i386-linux")
> > OUTPUT_ARCH(i386)
> 13,47c11
> <   /* Read-only sections, merged into text segment: */
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> <   .note.gnu.build-id : { *(.note.gnu.build-id) }
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> <     {
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> <     }
> <   .init           :
> ---
> >   .text :
> 49c13,31
> <     KEEP (*(SORT_NONE(.init)))
> ---
> >     CREATE_OBJECT_SYMBOLS
> >     *(.text)
> >     /* The next six sections are for SunOS dynamic linking.  The order
> >        is important.  */
> >     *(.dynrel)
> >     *(.hash)
> >     *(.dynsym)
> >     *(.dynstr)
> >     *(.rules)
> >     *(.need)
> >   }
> >   .data :
> >   {
> >     /* The first three sections are for SunOS dynamic linking.  */
> >     *(.dynamic)
> >     *(.got)
> >     *(.plt)
> >     *(.data)
> >     *(.linux-dynamic) /* For Linux dynamic linking.  */
> 51,52c33
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .bss :
> 54,157c35,36
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> <     /* .gnu.warning sections are handled specially by elf32.em.  */
> <     *(.gnu.warning)
> <   }
> <   .fini           :
> <   {
> <     KEEP (*(SORT_NONE(.fini)))
> <   }
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> <   .gcc_except_table.*) }
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> <   /* These sections are generated by the Sun/Oracle C++ compiler.  */
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> <   .exception_ranges*) }
> <   /* Adjust the address for the data segment.  We want to adjust up to
> <      the same address within the page on the next page up.  */
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> <   /* Exception handling  */
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> <   /* Thread Local Storage sections  */
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> <   {
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> <     KEEP (*(.preinit_array))
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> <   }
> <   .init_array     :
> <   {
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> <   {
> <    *(.dynbss)
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    ;
> >    *(.bss)
> 159,181c38,39
> <    /* Align here to ensure that the .bss section occupies space up to
> <       _end.  Align after .bss to ensure correct alignment even if the
> <       .bss section disappears because there are no input sections.
> <       FIXME: Why do we need it? When there is no .bss section, we don't
> <       pad the .data section.  */
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    ;
> >    ;
> 183,225d40
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> <   /* Stabs debugging sections.  */
> <   .stab          0 : { *(.stab) }
> <   .stabstr       0 : { *(.stabstr) }
> <   .stab.excl     0 : { *(.stab.excl) }
> <   .stab.exclstr  0 : { *(.stab.exclstr) }
> <   .stab.index    0 : { *(.stab.index) }
> <   .stab.indexstr 0 : { *(.stab.indexstr) }
> <   .comment       0 : { *(.comment) }
> <   /* DWARF debug sections.
> <      Symbols in the DWARF debugging sections are relative to the beginning
> <      of the section so we begin them at 0.  */
> <   /* DWARF 1 */
> <   .debug          0 : { *(.debug) }
> <   .line           0 : { *(.line) }
> <   /* GNU DWARF 1 extensions */
> <   .debug_srcinfo  0 : { *(.debug_srcinfo) }
> <   .debug_sfnames  0 : { *(.debug_sfnames) }
> <   /* DWARF 1.1 and DWARF 2 */
> <   .debug_aranges  0 : { *(.debug_aranges) }
> <   .debug_pubnames 0 : { *(.debug_pubnames) }
> <   /* DWARF 2 */
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> <   .debug_abbrev   0 : { *(.debug_abbrev) }
> <   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
> <   .debug_frame    0 : { *(.debug_frame) }
> <   .debug_str      0 : { *(.debug_str) }
> <   .debug_loc      0 : { *(.debug_loc) }
> <   .debug_macinfo  0 : { *(.debug_macinfo) }
> <   /* SGI/MIPS DWARF 2 extensions */
> <   .debug_weaknames 0 : { *(.debug_weaknames) }
> <   .debug_funcnames 0 : { *(.debug_funcnames) }
> <   .debug_typenames 0 : { *(.debug_typenames) }
> <   .debug_varnames  0 : { *(.debug_varnames) }
> <   /* DWARF 3 */
> <   .debug_pubtypes 0 : { *(.debug_pubtypes) }
> <   .debug_ranges   0 : { *(.debug_ranges) }
> <   /* DWARF Extension.  */
> <   .debug_macro    0 : { *(.debug_macro) }
> <   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> i386linux.xu
> 1c1
> < /* Default linker script, for normal executables */
> ---
> > /* Script for ld -Ur: link w/out relocation, do create constructors */
> 6,10c6,8
> < OUTPUT_FORMAT("elf32-x86-64", "elf32-x86-64",
> < 	      "elf32-x86-64")
> < OUTPUT_ARCH(i386:x64-32)
> < ENTRY(_start)
> < SEARCH_DIR("/usr/x86_64-pc-linux-gnu/libx32"); SEARCH_DIR("/usr/local/libx32"); SEARCH_DIR("/libx32"); SEARCH_DIR("/usr/libx32"); SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");
> ---
> > OUTPUT_FORMAT("a.out-i386-linux", "a.out-i386-linux",
> > 	      "a.out-i386-linux")
> > OUTPUT_ARCH(i386)
> 13,47c11
> <   /* Read-only sections, merged into text segment: */
> <   PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
> <   .interp         : { *(.interp) }
> <   .note.gnu.build-id : { *(.note.gnu.build-id) }
> <   .hash           : { *(.hash) }
> <   .gnu.hash       : { *(.gnu.hash) }
> <   .dynsym         : { *(.dynsym) }
> <   .dynstr         : { *(.dynstr) }
> <   .gnu.version    : { *(.gnu.version) }
> <   .gnu.version_d  : { *(.gnu.version_d) }
> <   .gnu.version_r  : { *(.gnu.version_r) }
> <   .rela.init      : { *(.rela.init) }
> <   .rela.text      : { *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*) }
> <   .rela.fini      : { *(.rela.fini) }
> <   .rela.rodata    : { *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*) }
> <   .rela.data.rel.ro   : { *(.rela.data.rel.ro .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*) }
> <   .rela.data      : { *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*) }
> <   .rela.tdata	  : { *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*) }
> <   .rela.tbss	  : { *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*) }
> <   .rela.ctors     : { *(.rela.ctors) }
> <   .rela.dtors     : { *(.rela.dtors) }
> <   .rela.got       : { *(.rela.got) }
> <   .rela.bss       : { *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*) }
> <   .rela.ldata     : { *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*) }
> <   .rela.lbss      : { *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*) }
> <   .rela.lrodata   : { *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*) }
> <   .rela.ifunc     : { *(.rela.ifunc) }
> <   .rela.plt       :
> <     {
> <       *(.rela.plt)
> <       PROVIDE_HIDDEN (__rela_iplt_start = .);
> <       *(.rela.iplt)
> <       PROVIDE_HIDDEN (__rela_iplt_end = .);
> <     }
> <   .init           :
> ---
> >   .text :
> 49c13,32
> <     KEEP (*(SORT_NONE(.init)))
> ---
> >     CREATE_OBJECT_SYMBOLS
> >     *(.text)
> >     /* The next six sections are for SunOS dynamic linking.  The order
> >        is important.  */
> >     *(.dynrel)
> >     *(.hash)
> >     *(.dynsym)
> >     *(.dynstr)
> >     *(.rules)
> >     *(.need)
> >   }
> >   .data :
> >   {
> >     /* The first three sections are for SunOS dynamic linking.  */
> >     *(.dynamic)
> >     *(.got)
> >     *(.plt)
> >     *(.data)
> >     *(.linux-dynamic) /* For Linux dynamic linking.  */
> >     CONSTRUCTORS
> 51,52c34
> <   .plt            : { *(.plt) *(.iplt) }
> <   .text           :
> ---
> >   .bss :
> 54,157c36,37
> <     *(.text.unlikely .text.*_unlikely .text.unlikely.*)
> <     *(.text.exit .text.exit.*)
> <     *(.text.startup .text.startup.*)
> <     *(.text.hot .text.hot.*)
> <     *(.text .stub .text.* .gnu.linkonce.t.*)
> <     /* .gnu.warning sections are handled specially by elf32.em.  */
> <     *(.gnu.warning)
> <   }
> <   .fini           :
> <   {
> <     KEEP (*(SORT_NONE(.fini)))
> <   }
> <   PROVIDE (__etext = .);
> <   PROVIDE (_etext = .);
> <   PROVIDE (etext = .);
> <   .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
> <   .rodata1        : { *(.rodata1) }
> <   .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
> <   .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
> <   .gcc_except_table.*) }
> <   .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
> <   /* These sections are generated by the Sun/Oracle C++ compiler.  */
> <   .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
> <   .exception_ranges*) }
> <   /* Adjust the address for the data segment.  We want to adjust up to
> <      the same address within the page on the next page up.  */
> <   . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
> <   /* Exception handling  */
> <   .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
> <   .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
> <   .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
> <   .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
> <   /* Thread Local Storage sections  */
> <   .tdata	  : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
> <   .tbss		  : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
> <   .preinit_array     :
> <   {
> <     PROVIDE_HIDDEN (__preinit_array_start = .);
> <     KEEP (*(.preinit_array))
> <     PROVIDE_HIDDEN (__preinit_array_end = .);
> <   }
> <   .init_array     :
> <   {
> <     PROVIDE_HIDDEN (__init_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
> <     KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
> <     PROVIDE_HIDDEN (__init_array_end = .);
> <   }
> <   .fini_array     :
> <   {
> <     PROVIDE_HIDDEN (__fini_array_start = .);
> <     KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
> <     KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
> <     PROVIDE_HIDDEN (__fini_array_end = .);
> <   }
> <   .ctors          :
> <   {
> <     /* gcc uses crtbegin.o to find the start of
> <        the constructors, so we make sure it is
> <        first.  Because this is a wildcard, it
> <        doesn't matter if the user does not
> <        actually link against crtbegin.o; the
> <        linker won't look for a file to match a
> <        wildcard.  The wildcard also means that it
> <        doesn't matter which directory crtbegin.o
> <        is in.  */
> <     KEEP (*crtbegin.o(.ctors))
> <     KEEP (*crtbegin?.o(.ctors))
> <     /* We don't want to include the .ctor section from
> <        the crtend.o file until after the sorted ctors.
> <        The .ctor section from the crtend file contains the
> <        end of ctors marker and it must be last */
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
> <     KEEP (*(SORT(.ctors.*)))
> <     KEEP (*(.ctors))
> <   }
> <   .dtors          :
> <   {
> <     KEEP (*crtbegin.o(.dtors))
> <     KEEP (*crtbegin?.o(.dtors))
> <     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
> <     KEEP (*(SORT(.dtors.*)))
> <     KEEP (*(.dtors))
> <   }
> <   .jcr            : { KEEP (*(.jcr)) }
> <   .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
> <   .dynamic        : { *(.dynamic) }
> <   .got            : { *(.got) *(.igot) }
> <   . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
> <   .got.plt        : { *(.got.plt)  *(.igot.plt) }
> <   .data           :
> <   {
> <     *(.data .data.* .gnu.linkonce.d.*)
> <     SORT(CONSTRUCTORS)
> <   }
> <   .data1          : { *(.data1) }
> <   _edata = .; PROVIDE (edata = .);
> <   . = .;
> <   __bss_start = .;
> <   .bss            :
> <   {
> <    *(.dynbss)
> <    *(.bss .bss.* .gnu.linkonce.b.*)
> ---
> >    ;
> >    *(.bss)
> 159,181c39,40
> <    /* Align here to ensure that the .bss section occupies space up to
> <       _end.  Align after .bss to ensure correct alignment even if the
> <       .bss section disappears because there are no input sections.
> <       FIXME: Why do we need it? When there is no .bss section, we don't
> <       pad the .data section.  */
> <    . = ALIGN(. != 0 ? 32 / 8 : 1);
> <   }
> <   .lbss   :
> <   {
> <     *(.dynlbss)
> <     *(.lbss .lbss.* .gnu.linkonce.lb.*)
> <     *(LARGE_COMMON)
> <   }
> <   . = ALIGN(32 / 8);
> <   . = SEGMENT_START("ldata-segment", .);
> <   .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
> <   }
> <   .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
> <   {
> <     *(.ldata .ldata.* .gnu.linkonce.l.*)
> <     . = ALIGN(. != 0 ? 32 / 8 : 1);
> ---
> >    ;
> >    ;
> 183,225d41
> <   . = ALIGN(32 / 8);
> <   _end = .; PROVIDE (end = .);
> <   . = DATA_SEGMENT_END (.);
> <   /* Stabs debugging sections.  */
> <   .stab          0 : { *(.stab) }
> <   .stabstr       0 : { *(.stabstr) }
> <   .stab.excl     0 : { *(.stab.excl) }
> <   .stab.exclstr  0 : { *(.stab.exclstr) }
> <   .stab.index    0 : { *(.stab.index) }
> <   .stab.indexstr 0 : { *(.stab.indexstr) }
> <   .comment       0 : { *(.comment) }
> <   /* DWARF debug sections.
> <      Symbols in the DWARF debugging sections are relative to the beginning
> <      of the section so we begin them at 0.  */
> <   /* DWARF 1 */
> <   .debug          0 : { *(.debug) }
> <   .line           0 : { *(.line) }
> <   /* GNU DWARF 1 extensions */
> <   .debug_srcinfo  0 : { *(.debug_srcinfo) }
> <   .debug_sfnames  0 : { *(.debug_sfnames) }
> <   /* DWARF 1.1 and DWARF 2 */
> <   .debug_aranges  0 : { *(.debug_aranges) }
> <   .debug_pubnames 0 : { *(.debug_pubnames) }
> <   /* DWARF 2 */
> <   .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
> <   .debug_abbrev   0 : { *(.debug_abbrev) }
> <   .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
> <   .debug_frame    0 : { *(.debug_frame) }
> <   .debug_str      0 : { *(.debug_str) }
> <   .debug_loc      0 : { *(.debug_loc) }
> <   .debug_macinfo  0 : { *(.debug_macinfo) }
> <   /* SGI/MIPS DWARF 2 extensions */
> <   .debug_weaknames 0 : { *(.debug_weaknames) }
> <   .debug_funcnames 0 : { *(.debug_funcnames) }
> <   .debug_typenames 0 : { *(.debug_typenames) }
> <   .debug_varnames  0 : { *(.debug_varnames) }
> <   /* DWARF 3 */
> <   .debug_pubtypes 0 : { *(.debug_pubtypes) }
> <   .debug_ranges   0 : { *(.debug_ranges) }
> <   /* DWARF Extension.  */
> <   .debug_macro    0 : { *(.debug_macro) }
> <   .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
> <   /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
> outputfile
